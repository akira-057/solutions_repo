{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 \ud83d\udccc Mechanics: Investigating the Range as a Function of the Angle of Projection \ud83c\udff9 Motivation Projectile motion appears simple, yet it encapsulates deep physical principles. By analyzing how the range of a projectile varies with its launch angle, we uncover fascinating relationships governed by linear and quadratic equations. These equations have broad applications, from sports (e.g., the trajectory of a soccer ball) to engineering (e.g., missile launch dynamics). \u2696 1. Theoretical Foundation \ud83d\udcdc Equations of Motion A projectile launched with an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) follows a parabolic trajectory under the influence of gravity. We derive its motion using Newton's laws. \ud83d\udd39 Horizontal Motion Since there is no acceleration in the horizontal direction (assuming no air resistance), the velocity remains constant \\[ x(t) = v_0 \\cos\\theta \\cdot t \\] \ud83d\udd39 Vertical Motion The vertical motion is governed by constant acceleration due to gravity \\( g \\) : \\[ y(t) = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 \\] The projectile reaches the ground when \\( y = 0 \\) , solving for \\( t \\) : \\[ t_f = \\frac{2 v_0 \\sin\\theta}{g} \\] This is the total time of flight . \ud83d\udccf 2. Analysis of the Range The range \\( R \\) is the horizontal distance covered by the projectile when it lands: \\[ R = x(t_f) = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} \\] Using the identity \\( 2\\sin\\theta\\cos\\theta = \\sin 2\\theta \\) , we get: \\[ R = \\frac{v_0^2}{g} \\sin 2\\theta \\] \ud83d\udccc Key Observations: Maximum Range: The range is maximized when \\( \\sin 2\\theta = 1 \\) , i.e., \\( 2\\theta = 90^\\circ \\) \u2192 \\( \\theta = 45^\\circ \\) . Symmetry: The function \\( R(\\theta) \\) is symmetric around \\( 45^\\circ \\) , meaning \\( R(\\theta) = R(90^\\circ - \\theta) \\) . Effect of Initial Velocity: Since \\( R \\propto v_0^2 \\) , doubling \\( v_0 \\) quadruples the range. Effect of Gravity: Since \\( R \\propto \\frac{1}{g} \\) , projectiles travel farther on planets with lower gravity (e.g., the Moon). \ud83c\udf0e 3. Practical Applications Sports: Soccer: Kicking a ball at \\( 45^\\circ \\) for maximum distance. Basketball: Analyzing the optimal shooting angle. Engineering & Ballistics: Missile trajectories and range optimization. Water fountains and fluid mechanics. Astrophysics: Moon landings require adjusting launch angles based on gravity. \ud83d\udcbb 4. Implementation (Python Simulation) \ud83d\udd39 Graph Interpretation The maximum range occurs at \u03b8 = 45\u00b0 The function is symmetric about 45\u00b0 Higher v\u2080 increases range quadratically \ud83d\udd39 Limitations of the Model Assumes no air resistance Assumes flat terrain (ignores hills, obstacles) Ignores wind effects , which can alter trajectories \ud83d\udd39 Enhancements Add air drag to create more realistic simulations Consider launches from elevated platforms (e.g., artillery firing from a hill) Visit My Collab import numpy as np import matplotlib.pyplot as plt # Gravitational acceleration g = 9.81 # Function to plot the trajectory def trajectory(v0, angle_deg): angle_rad = np.radians(angle_deg) t_flight = 2 * v0 * np.sin(angle_rad) / g t = np.linspace(0, t_flight, num=500) x = v0 * np.cos(angle_rad) * t y = v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 return x, y # Graph (a) plt.figure(figsize=(12, 10)) plt.subplot(2, 1, 1) for v0, color in zip([30, 40, 50], ['red', 'purple', 'green']): x, y = trajectory(v0, 45) plt.plot(x, y, color=color, label=f'{v0} m/s') plt.title('(a) Same angle (45\u00b0), different speeds') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.grid(True) plt.legend() plt.axvline(91.8, color='black', linestyle='--') plt.axvline(163, color='black', linestyle='--') plt.axvline(255, color='black', linestyle='--') plt.xlim(0, 270) plt.ylim(0, 70) # Graph (b) plt.subplot(2, 1, 2) v0 = 50 for angle, color in zip([15, 45, 75], ['red', 'purple', 'green']): x, y = trajectory(v0, angle) plt.plot(x, y, color=color, label=f'{angle}\u00b0') plt.title('(b) Same speed (50 m/s), different angles') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.grid(True) plt.legend() plt.axvline(128, color='black', linestyle='--') plt.axvline(255, color='black', linestyle='--') plt.xlim(0, 270) plt.ylim(0, 130) plt.tight_layout() plt.show() \ud83c\udfaf Projectile Motion Analysis \ud83d\udcca Graph (a): Different Initial Speeds, Same Angle (45\u00b0) Launch angle: 45\u00b0 \u2014 this is the optimal angle for achieving maximum range when the initial speed is fixed. Initial speeds: - 30 m/s (\ud83d\udd34 red trajectory) - 40 m/s (\ud83d\udfe3 purple trajectory) - 50 m/s (\ud83d\udfe2 green trajectory) Conclusion: The greater the initial speed (with a fixed angle), the farther the projectile travels. Example ranges (R): - 30 m/s \u2192 R \u2248 91.8 m - 40 m/s \u2192 R \u2248 163 m - 50 m/s \u2192 R \u2248 255 m \ud83d\udccc Range formula: R = (v\u2080\u00b2 * sin(2\u03b8)) / g When \u03b8 = 45\u00b0 , sin(2\u03b8) = sin(90\u00b0) = 1 \u2192 So the range depends only on v\u2080\u00b2 . \ud83d\udcca Graph (b): Same Initial Speed (50 m/s), Different Angles Initial speed: 50 m/s for all three trajectories. Angles: - 15\u00b0 (\ud83d\udd34 red): low trajectory, small height and short range. - 45\u00b0 (\ud83d\udfe3 purple): maximum range. - 75\u00b0 (\ud83d\udfe2 green): high trajectory, but shorter range. Interesting fact: 15\u00b0 and 75\u00b0 give equal range ( R \u2248 128 m ), even though the shapes of the trajectories are very different. \ud83d\udccc Symmetry Law: Angles \u03b8 and 90\u00b0 \u2212 \u03b8 give the same range, because: sin(2\u03b8) = sin(2(90\u00b0 \u2212 \u03b8)) = sin(180\u00b0 \u2212 2\u03b8) = sin(2\u03b8) \ud83e\udde0 Main Takeaways: The best angle for maximum range with a given speed is 45\u00b0 . With the same angle, higher speed means greater range. Angles that add up to 90\u00b0 (like 15\u00b0 and 75\u00b0 ) give the same range, but different heights and flight paths. Visit My Collab import numpy as np import matplotlib.pyplot as plt # Gravitational acceleration g = 9.81 # Function to plot the trajectory def trajectory(v0, angle_deg): angle_rad = np.radians(angle_deg) t_flight = 2 * v0 * np.sin(angle_rad) / g t = np.linspace(0, t_flight, num=500) x = v0 * np.cos(angle_rad) * t y = v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 return x, y # Graph (a) plt.figure(figsize=(12, 10)) plt.subplot(2, 1, 1) for v0, color in zip([30, 40, 50], ['red', 'purple', 'green']): x, y = trajectory(v0, 45) plt.plot(x, y, color=color, label=f'{v0} m/s') plt.title('(a) Same angle (45\u00b0), different speeds') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.grid(True) plt.legend() plt.axvline(91.8, color='black', linestyle='--') plt.axvline(163, color='black', linestyle='--') plt.axvline(255, color='black', linestyle='--') plt.xlim(0, 270) plt.ylim(0, 70) # Graph (b) plt.subplot(2, 1, 2) v0 = 50 for angle, color in zip([15, 45, 75], ['red', 'purple', 'green']): x, y = trajectory(v0, angle) plt.plot(x, y, color=color, label=f'{angle}\u00b0') plt.title('(b) Same speed (50 m/s), different angles') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.grid(True) plt.legend() plt.axvline(128, color='black', linestyle='--') plt.axvline(255, color='black', linestyle='--') plt.xlim(0, 270) plt.ylim(0, 130) plt.tight_layout() plt.show()","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#mechanics-investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"\ud83d\udccc Mechanics: Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#motivation","text":"Projectile motion appears simple, yet it encapsulates deep physical principles. By analyzing how the range of a projectile varies with its launch angle, we uncover fascinating relationships governed by linear and quadratic equations. These equations have broad applications, from sports (e.g., the trajectory of a soccer ball) to engineering (e.g., missile launch dynamics).","title":"\ud83c\udff9 Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"\u2696 1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#equations-of-motion","text":"A projectile launched with an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) follows a parabolic trajectory under the influence of gravity. We derive its motion using Newton's laws.","title":"\ud83d\udcdc Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-motion","text":"Since there is no acceleration in the horizontal direction (assuming no air resistance), the velocity remains constant \\[ x(t) = v_0 \\cos\\theta \\cdot t \\]","title":"\ud83d\udd39 Horizontal Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-motion","text":"The vertical motion is governed by constant acceleration due to gravity \\( g \\) : \\[ y(t) = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 \\] The projectile reaches the ground when \\( y = 0 \\) , solving for \\( t \\) : \\[ t_f = \\frac{2 v_0 \\sin\\theta}{g} \\] This is the total time of flight .","title":"\ud83d\udd39 Vertical Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The range \\( R \\) is the horizontal distance covered by the projectile when it lands: \\[ R = x(t_f) = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} \\] Using the identity \\( 2\\sin\\theta\\cos\\theta = \\sin 2\\theta \\) , we get: \\[ R = \\frac{v_0^2}{g} \\sin 2\\theta \\]","title":"\ud83d\udccf 2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#key-observations","text":"Maximum Range: The range is maximized when \\( \\sin 2\\theta = 1 \\) , i.e., \\( 2\\theta = 90^\\circ \\) \u2192 \\( \\theta = 45^\\circ \\) . Symmetry: The function \\( R(\\theta) \\) is symmetric around \\( 45^\\circ \\) , meaning \\( R(\\theta) = R(90^\\circ - \\theta) \\) . Effect of Initial Velocity: Since \\( R \\propto v_0^2 \\) , doubling \\( v_0 \\) quadruples the range. Effect of Gravity: Since \\( R \\propto \\frac{1}{g} \\) , projectiles travel farther on planets with lower gravity (e.g., the Moon).","title":"\ud83d\udccc Key Observations:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Sports: Soccer: Kicking a ball at \\( 45^\\circ \\) for maximum distance. Basketball: Analyzing the optimal shooting angle. Engineering & Ballistics: Missile trajectories and range optimization. Water fountains and fluid mechanics. Astrophysics: Moon landings require adjusting launch angles based on gravity.","title":"\ud83c\udf0e 3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation-python-simulation","text":"","title":"\ud83d\udcbb 4. Implementation (Python Simulation)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#graph-interpretation","text":"The maximum range occurs at \u03b8 = 45\u00b0 The function is symmetric about 45\u00b0 Higher v\u2080 increases range quadratically","title":"\ud83d\udd39 Graph Interpretation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#limitations-of-the-model","text":"Assumes no air resistance Assumes flat terrain (ignores hills, obstacles) Ignores wind effects , which can alter trajectories","title":"\ud83d\udd39 Limitations of the Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#enhancements","text":"Add air drag to create more realistic simulations Consider launches from elevated platforms (e.g., artillery firing from a hill) Visit My Collab import numpy as np import matplotlib.pyplot as plt # Gravitational acceleration g = 9.81 # Function to plot the trajectory def trajectory(v0, angle_deg): angle_rad = np.radians(angle_deg) t_flight = 2 * v0 * np.sin(angle_rad) / g t = np.linspace(0, t_flight, num=500) x = v0 * np.cos(angle_rad) * t y = v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 return x, y # Graph (a) plt.figure(figsize=(12, 10)) plt.subplot(2, 1, 1) for v0, color in zip([30, 40, 50], ['red', 'purple', 'green']): x, y = trajectory(v0, 45) plt.plot(x, y, color=color, label=f'{v0} m/s') plt.title('(a) Same angle (45\u00b0), different speeds') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.grid(True) plt.legend() plt.axvline(91.8, color='black', linestyle='--') plt.axvline(163, color='black', linestyle='--') plt.axvline(255, color='black', linestyle='--') plt.xlim(0, 270) plt.ylim(0, 70) # Graph (b) plt.subplot(2, 1, 2) v0 = 50 for angle, color in zip([15, 45, 75], ['red', 'purple', 'green']): x, y = trajectory(v0, angle) plt.plot(x, y, color=color, label=f'{angle}\u00b0') plt.title('(b) Same speed (50 m/s), different angles') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.grid(True) plt.legend() plt.axvline(128, color='black', linestyle='--') plt.axvline(255, color='black', linestyle='--') plt.xlim(0, 270) plt.ylim(0, 130) plt.tight_layout() plt.show()","title":"\ud83d\udd39 Enhancements"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#projectile-motion-analysis","text":"","title":"\ud83c\udfaf Projectile Motion Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#graph-a-different-initial-speeds-same-angle-45","text":"Launch angle: 45\u00b0 \u2014 this is the optimal angle for achieving maximum range when the initial speed is fixed. Initial speeds: - 30 m/s (\ud83d\udd34 red trajectory) - 40 m/s (\ud83d\udfe3 purple trajectory) - 50 m/s (\ud83d\udfe2 green trajectory) Conclusion: The greater the initial speed (with a fixed angle), the farther the projectile travels. Example ranges (R): - 30 m/s \u2192 R \u2248 91.8 m - 40 m/s \u2192 R \u2248 163 m - 50 m/s \u2192 R \u2248 255 m","title":"\ud83d\udcca Graph (a): Different Initial Speeds, Same Angle (45\u00b0)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-formula","text":"R = (v\u2080\u00b2 * sin(2\u03b8)) / g When \u03b8 = 45\u00b0 , sin(2\u03b8) = sin(90\u00b0) = 1 \u2192 So the range depends only on v\u2080\u00b2 .","title":"\ud83d\udccc Range formula:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#graph-b-same-initial-speed-50-ms-different-angles","text":"Initial speed: 50 m/s for all three trajectories. Angles: - 15\u00b0 (\ud83d\udd34 red): low trajectory, small height and short range. - 45\u00b0 (\ud83d\udfe3 purple): maximum range. - 75\u00b0 (\ud83d\udfe2 green): high trajectory, but shorter range. Interesting fact: 15\u00b0 and 75\u00b0 give equal range ( R \u2248 128 m ), even though the shapes of the trajectories are very different.","title":"\ud83d\udcca Graph (b): Same Initial Speed (50 m/s), Different Angles"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#symmetry-law","text":"Angles \u03b8 and 90\u00b0 \u2212 \u03b8 give the same range, because: sin(2\u03b8) = sin(2(90\u00b0 \u2212 \u03b8)) = sin(180\u00b0 \u2212 2\u03b8) = sin(2\u03b8)","title":"\ud83d\udccc Symmetry Law:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#main-takeaways","text":"The best angle for maximum range with a given speed is 45\u00b0 . With the same angle, higher speed means greater range. Angles that add up to 90\u00b0 (like 15\u00b0 and 75\u00b0 ) give the same range, but different heights and flight paths. Visit My Collab import numpy as np import matplotlib.pyplot as plt # Gravitational acceleration g = 9.81 # Function to plot the trajectory def trajectory(v0, angle_deg): angle_rad = np.radians(angle_deg) t_flight = 2 * v0 * np.sin(angle_rad) / g t = np.linspace(0, t_flight, num=500) x = v0 * np.cos(angle_rad) * t y = v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 return x, y # Graph (a) plt.figure(figsize=(12, 10)) plt.subplot(2, 1, 1) for v0, color in zip([30, 40, 50], ['red', 'purple', 'green']): x, y = trajectory(v0, 45) plt.plot(x, y, color=color, label=f'{v0} m/s') plt.title('(a) Same angle (45\u00b0), different speeds') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.grid(True) plt.legend() plt.axvline(91.8, color='black', linestyle='--') plt.axvline(163, color='black', linestyle='--') plt.axvline(255, color='black', linestyle='--') plt.xlim(0, 270) plt.ylim(0, 70) # Graph (b) plt.subplot(2, 1, 2) v0 = 50 for angle, color in zip([15, 45, 75], ['red', 'purple', 'green']): x, y = trajectory(v0, angle) plt.plot(x, y, color=color, label=f'{angle}\u00b0') plt.title('(b) Same speed (50 m/s), different angles') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.grid(True) plt.legend() plt.axvline(128, color='black', linestyle='--') plt.axvline(255, color='black', linestyle='--') plt.xlim(0, 270) plt.ylim(0, 130) plt.tight_layout() plt.show()","title":"\ud83e\udde0 Main Takeaways:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 \ud83d\udccc Investigating the Dynamics of a Forced Damped Pendulum \ud83c\udfd7 Motivation The forced damped pendulum is a fascinating system that exhibits a range of behaviors, from simple oscillations to chaotic motion. By introducing damping and an external periodic force, we observe a transition from regular periodic motion to resonance, quasiperiodicity, and chaos . This system is crucial for understanding: - Resonance in mechanical systems (e.g., bridges, buildings under periodic stress). - Nonlinear dynamics and chaos theory (e.g., weather patterns, heart rhythms). - Energy harvesting from oscillations. \u2696 1. Theoretical Foundation \ud83d\udcdc Equation of Motion The forced damped pendulum follows the nonlinear differential equation: \\[ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\sin\\theta = A \\cos(\\omega t) \\] where: - \\( \\theta \\) = angular displacement - \\( \\gamma \\) = damping coefficient - \\( \\omega_0 \\) = natural frequency of the pendulum ( \\( \\omega_0 = \\sqrt{\\frac{g}{L}} \\) ) - \\( A \\) = amplitude of the external driving force - \\( \\omega \\) = driving frequency For small angles ( \\( \\theta \\approx \\sin\\theta \\) ), the equation simplifies to: \\[ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] which resembles the equation of a driven damped harmonic oscillator . \ud83d\udccc Resonance Condition Resonance occurs when the driving frequency \\( \\omega \\) matches the natural frequency \\( \\omega_0 \\) , leading to maximum energy absorption and large oscillations: \\[ \\omega_{\\text{res}} \\approx \\sqrt{\\omega_0^2 - \\frac{\\gamma^2}{4}} \\] At resonance, even small driving forces can produce large oscillations, which is crucial in mechanical engineering and structural safety . \ud83d\udcca 2. Analysis of Dynamics \ud83d\udd39 Effect of Damping ( \\( \\gamma \\) ) Low damping: The pendulum exhibits large oscillations and resonance. High damping: The system stabilizes quickly with reduced oscillations. \ud83d\udd39 Effect of Driving Amplitude ( \\( A \\) ) Low amplitude: The pendulum undergoes periodic motion. High amplitude: The system transitions into chaotic motion for certain frequencies. \ud83d\udd39 Effect of Driving Frequency ( \\( \\omega \\) ) When \\( \\omega \\approx \\omega_0 \\) , resonance occurs. When \\( \\omega \\) is far from \\( \\omega_0 \\) , the response is weak. Nonlinear behavior emerges at certain parameter values, leading to chaos. \ud83c\udf0d 3. Practical Applications Engineering & Structural Dynamics Bridges & Skyscrapers: Understanding how periodic forces (e.g., wind, earthquakes) affect large structures. Vibration Isolation: Designing materials that minimize resonance effects. Energy Harvesting Pendulum-based generators: Extracting energy from periodic motion. Ocean wave energy devices. Chaos Theory & Climate Models Weather prediction models involve nonlinear oscillatory behaviors similar to the forced pendulum. \ud83d\udcbb 4. Implementation (Python Simulation) \ud83c\udf00 Forced Damped Pendulum \u2013 Graph Explanations This document explains the results of simulating different types of pendulum motion using Python. Each case includes plots of: - Angle vs. Time - Phase Diagram (Angle vs. Angular Velocity) \ud83d\udd39 1) Simple Pendulum Parameters: - Damping: b = 0 - External Force: A = 0 Explanation: - This is an ideal pendulum with no friction and no external driving force. - The angle oscillates sinusoidally \u2014 classic harmonic motion. - The phase portrait shows a closed elliptical trajectory , indicating periodic motion with constant energy. - This case illustrates the basics of classical mechanics. \ud83d\udd39 2) Damped Pendulum Parameters: - Damping: b > 0 - External Force: A = 0 Explanation: - The pendulum loses energy over time due to friction. - The amplitude of oscillation gradually decreases until the system comes to rest. - The phase portrait shows a spiral converging to the center , representing damped oscillations . - Eventually, the pendulum reaches equilibrium. \ud83d\udd39 3) Forced Pendulum Parameters: - Damping: b = 0 - External Force: A \u2260 0 , \u03c9 \u2260 0 Explanation: - The pendulum is driven by an external periodic force. - The motion becomes non-periodic and more complex , with varying amplitude. - The phase portrait displays non-closed loops , indicating the pendulum is constantly gaining energy from the driving force. - Demonstrates unstable behavior under continuous forcing. \ud83d\udd39 4) Forced Damped Pendulum Parameters: - Damping: b > 0 - External Force: A \u2260 0 Explanation: - A combination of friction and periodic forcing leads to stable oscillations with limited amplitude . - The amplitude grows initially, then settles into a steady state. - The phase portrait shows a stable closed loop , indicating synchronization with the external force . - Very important for understanding resonant systems in engineering . \ud83d\udd39 5) Chaotic / Resonant Pendulum Parameters: - Damping: b > 0 - Driving Force: A is large, \u03c9 is near resonance Explanation: - This system exhibits chaotic or resonant behavior . - The angle varies unpredictably, with no fixed frequency or amplitude. - The phase portrait shows a complicated, tangled structure , characteristic of chaotic systems . - Demonstrates how deterministic systems can behave unpredictably . \ud83e\udde0 Summary These five cases demonstrate the full spectrum of pendulum dynamics \u2014 from regular harmonic motion to complex chaotic behavior. They highlight key physical phenomena: - \u2705 Harmonic motion - \u2705 Damping and energy loss - \u2705 Forced synchronization - \u2705 Chaos and unpredictability Visit My Collab import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # \u0423\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u044f\u0442\u043d\u0438\u043a\u0430: d\u00b2\u03b8/dt\u00b2 + b*d\u03b8/dt + sin(\u03b8) = A*cos(\u03c9*t) def pendulum(t, y, b, A, omega): theta, omega_ = y dtheta_dt = omega_ domega_dt = -b * omega_ - np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u03b8(t) \u0438 (\u03b8, \u03c9) def plot_pendulum(t, sol, title, color): theta = sol[0] omega = sol[1] fig, ax = plt.subplots(1, 2, figsize=(14, 4)) fig.suptitle(title, fontsize=16) ax[0].plot(t, theta, color=color) ax[0].set_title(\"Time Series\") ax[0].set_xlabel(\"Time (s)\") ax[0].set_ylabel(\"Angle (rad)\") ax[0].grid(True) ax[1].plot(theta, omega, color=color) ax[1].set_title(\"Phase Portrait\") ax[1].set_xlabel(\"\u03b8 (rad)\") ax[1].set_ylabel(\"\u03c9 (rad/s)\") ax[1].grid(True) plt.tight_layout() plt.subplots_adjust(top=0.85) # \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043d\u0435 \u043d\u0430\u043b\u0435\u0437\u0430\u043b plt.show() # \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f t_span = (0, 30) t_eval = np.linspace(*t_span, 2000) initial_state = [0.1, 0.0] # \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0433\u043e\u043b \u0438 \u0443\u0433\u043b\u043e\u0432\u0430\u044f \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c # ===== 1. Simple Pendulum ===== sol1 = solve_ivp(pendulum, t_span, initial_state, t_eval=t_eval, args=(0.0, 0.0, 0.0)) plot_pendulum(sol1.t, sol1.y, \"1) Simple Pendulum (b=0, A=0)\", \"crimson\") # ===== 2. Damped Pendulum ===== sol2 = solve_ivp(pendulum, t_span, initial_state, t_eval=t_eval, args=(0.5, 0.0, 0.0)) plot_pendulum(sol2.t, sol2.y, \"2) Damped Pendulum (b=0.5, A=0)\", \"darkblue\") # ===== 3. Forced Pendulum ===== sol3 = solve_ivp(pendulum, t_span, initial_state, t_eval=t_eval, args=(0.0, 1.0, 2.0)) plot_pendulum(sol3.t, sol3.y, \"3) Forced Pendulum (b=0, A=1.0, \u03c9=2.0)\", \"teal\") # ===== 4. Forced Damped Pendulum ===== sol4 = solve_ivp(pendulum, t_span, initial_state, t_eval=t_eval, args=(0.2, 1.2, 2.0)) plot_pendulum(sol4.t, sol4.y, \"4) Forced Damped Pendulum (b=0.2, A=1.2, \u03c9=2.0)\", \"orange\") # ===== 5. Chaotic / Resonant Pendulum ===== sol5 = solve_ivp(pendulum, t_span, initial_state, t_eval=t_eval, args=(0.5, 1.5, 2/3)) plot_pendulum(sol5.t, sol5.y, \"5) Chaotic / Resonant Pendulum (b=0.5, A=1.5, \u03c9=2/3)\", \"firebrick\")","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"\ud83d\udccc Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#motivation","text":"The forced damped pendulum is a fascinating system that exhibits a range of behaviors, from simple oscillations to chaotic motion. By introducing damping and an external periodic force, we observe a transition from regular periodic motion to resonance, quasiperiodicity, and chaos . This system is crucial for understanding: - Resonance in mechanical systems (e.g., bridges, buildings under periodic stress). - Nonlinear dynamics and chaos theory (e.g., weather patterns, heart rhythms). - Energy harvesting from oscillations.","title":"\ud83c\udfd7 Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"\u2696 1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#equation-of-motion","text":"The forced damped pendulum follows the nonlinear differential equation: \\[ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\sin\\theta = A \\cos(\\omega t) \\] where: - \\( \\theta \\) = angular displacement - \\( \\gamma \\) = damping coefficient - \\( \\omega_0 \\) = natural frequency of the pendulum ( \\( \\omega_0 = \\sqrt{\\frac{g}{L}} \\) ) - \\( A \\) = amplitude of the external driving force - \\( \\omega \\) = driving frequency For small angles ( \\( \\theta \\approx \\sin\\theta \\) ), the equation simplifies to: \\[ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] which resembles the equation of a driven damped harmonic oscillator .","title":"\ud83d\udcdc Equation of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-condition","text":"Resonance occurs when the driving frequency \\( \\omega \\) matches the natural frequency \\( \\omega_0 \\) , leading to maximum energy absorption and large oscillations: \\[ \\omega_{\\text{res}} \\approx \\sqrt{\\omega_0^2 - \\frac{\\gamma^2}{4}} \\] At resonance, even small driving forces can produce large oscillations, which is crucial in mechanical engineering and structural safety .","title":"\ud83d\udccc Resonance Condition"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"","title":"\ud83d\udcca 2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#effect-of-damping-gamma","text":"Low damping: The pendulum exhibits large oscillations and resonance. High damping: The system stabilizes quickly with reduced oscillations.","title":"\ud83d\udd39 Effect of Damping (\\( \\gamma \\))"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#effect-of-driving-amplitude-a","text":"Low amplitude: The pendulum undergoes periodic motion. High amplitude: The system transitions into chaotic motion for certain frequencies.","title":"\ud83d\udd39 Effect of Driving Amplitude (\\( A \\))"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#effect-of-driving-frequency-omega","text":"When \\( \\omega \\approx \\omega_0 \\) , resonance occurs. When \\( \\omega \\) is far from \\( \\omega_0 \\) , the response is weak. Nonlinear behavior emerges at certain parameter values, leading to chaos.","title":"\ud83d\udd39 Effect of Driving Frequency (\\( \\omega \\))"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"Engineering & Structural Dynamics Bridges & Skyscrapers: Understanding how periodic forces (e.g., wind, earthquakes) affect large structures. Vibration Isolation: Designing materials that minimize resonance effects. Energy Harvesting Pendulum-based generators: Extracting energy from periodic motion. Ocean wave energy devices. Chaos Theory & Climate Models Weather prediction models involve nonlinear oscillatory behaviors similar to the forced pendulum.","title":"\ud83c\udf0d 3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation-python-simulation","text":"","title":"\ud83d\udcbb 4. Implementation (Python Simulation)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#forced-damped-pendulum-graph-explanations","text":"This document explains the results of simulating different types of pendulum motion using Python. Each case includes plots of: - Angle vs. Time - Phase Diagram (Angle vs. Angular Velocity)","title":"\ud83c\udf00 Forced Damped Pendulum \u2013 Graph Explanations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-simple-pendulum","text":"Parameters: - Damping: b = 0 - External Force: A = 0 Explanation: - This is an ideal pendulum with no friction and no external driving force. - The angle oscillates sinusoidally \u2014 classic harmonic motion. - The phase portrait shows a closed elliptical trajectory , indicating periodic motion with constant energy. - This case illustrates the basics of classical mechanics.","title":"\ud83d\udd39 1) Simple Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-damped-pendulum","text":"Parameters: - Damping: b > 0 - External Force: A = 0 Explanation: - The pendulum loses energy over time due to friction. - The amplitude of oscillation gradually decreases until the system comes to rest. - The phase portrait shows a spiral converging to the center , representing damped oscillations . - Eventually, the pendulum reaches equilibrium.","title":"\ud83d\udd39 2) Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-forced-pendulum","text":"Parameters: - Damping: b = 0 - External Force: A \u2260 0 , \u03c9 \u2260 0 Explanation: - The pendulum is driven by an external periodic force. - The motion becomes non-periodic and more complex , with varying amplitude. - The phase portrait displays non-closed loops , indicating the pendulum is constantly gaining energy from the driving force. - Demonstrates unstable behavior under continuous forcing.","title":"\ud83d\udd39 3) Forced Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-forced-damped-pendulum","text":"Parameters: - Damping: b > 0 - External Force: A \u2260 0 Explanation: - A combination of friction and periodic forcing leads to stable oscillations with limited amplitude . - The amplitude grows initially, then settles into a steady state. - The phase portrait shows a stable closed loop , indicating synchronization with the external force . - Very important for understanding resonant systems in engineering .","title":"\ud83d\udd39 4) Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-chaotic-resonant-pendulum","text":"Parameters: - Damping: b > 0 - Driving Force: A is large, \u03c9 is near resonance Explanation: - This system exhibits chaotic or resonant behavior . - The angle varies unpredictably, with no fixed frequency or amplitude. - The phase portrait shows a complicated, tangled structure , characteristic of chaotic systems . - Demonstrates how deterministic systems can behave unpredictably .","title":"\ud83d\udd39 5) Chaotic / Resonant Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#summary","text":"These five cases demonstrate the full spectrum of pendulum dynamics \u2014 from regular harmonic motion to complex chaotic behavior. They highlight key physical phenomena: - \u2705 Harmonic motion - \u2705 Damping and energy loss - \u2705 Forced synchronization - \u2705 Chaos and unpredictability Visit My Collab import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # \u0423\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u044f\u0442\u043d\u0438\u043a\u0430: d\u00b2\u03b8/dt\u00b2 + b*d\u03b8/dt + sin(\u03b8) = A*cos(\u03c9*t) def pendulum(t, y, b, A, omega): theta, omega_ = y dtheta_dt = omega_ domega_dt = -b * omega_ - np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u03b8(t) \u0438 (\u03b8, \u03c9) def plot_pendulum(t, sol, title, color): theta = sol[0] omega = sol[1] fig, ax = plt.subplots(1, 2, figsize=(14, 4)) fig.suptitle(title, fontsize=16) ax[0].plot(t, theta, color=color) ax[0].set_title(\"Time Series\") ax[0].set_xlabel(\"Time (s)\") ax[0].set_ylabel(\"Angle (rad)\") ax[0].grid(True) ax[1].plot(theta, omega, color=color) ax[1].set_title(\"Phase Portrait\") ax[1].set_xlabel(\"\u03b8 (rad)\") ax[1].set_ylabel(\"\u03c9 (rad/s)\") ax[1].grid(True) plt.tight_layout() plt.subplots_adjust(top=0.85) # \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043d\u0435 \u043d\u0430\u043b\u0435\u0437\u0430\u043b plt.show() # \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f t_span = (0, 30) t_eval = np.linspace(*t_span, 2000) initial_state = [0.1, 0.0] # \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0433\u043e\u043b \u0438 \u0443\u0433\u043b\u043e\u0432\u0430\u044f \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c # ===== 1. Simple Pendulum ===== sol1 = solve_ivp(pendulum, t_span, initial_state, t_eval=t_eval, args=(0.0, 0.0, 0.0)) plot_pendulum(sol1.t, sol1.y, \"1) Simple Pendulum (b=0, A=0)\", \"crimson\") # ===== 2. Damped Pendulum ===== sol2 = solve_ivp(pendulum, t_span, initial_state, t_eval=t_eval, args=(0.5, 0.0, 0.0)) plot_pendulum(sol2.t, sol2.y, \"2) Damped Pendulum (b=0.5, A=0)\", \"darkblue\") # ===== 3. Forced Pendulum ===== sol3 = solve_ivp(pendulum, t_span, initial_state, t_eval=t_eval, args=(0.0, 1.0, 2.0)) plot_pendulum(sol3.t, sol3.y, \"3) Forced Pendulum (b=0, A=1.0, \u03c9=2.0)\", \"teal\") # ===== 4. Forced Damped Pendulum ===== sol4 = solve_ivp(pendulum, t_span, initial_state, t_eval=t_eval, args=(0.2, 1.2, 2.0)) plot_pendulum(sol4.t, sol4.y, \"4) Forced Damped Pendulum (b=0.2, A=1.2, \u03c9=2.0)\", \"orange\") # ===== 5. Chaotic / Resonant Pendulum ===== sol5 = solve_ivp(pendulum, t_span, initial_state, t_eval=t_eval, args=(0.5, 1.5, 2/3)) plot_pendulum(sol5.t, sol5.y, \"5) Chaotic / Resonant Pendulum (b=0.5, A=1.5, \u03c9=2/3)\", \"firebrick\")","title":"\ud83e\udde0 Summary"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 \ud83c\udf0c Gravity Problem 1: Orbital Period and Orbital Radius \ud83e\udde0 Motivation Understanding the motion of celestial bodies is essential in astronomy and space exploration. Kepler's Third Law describes a powerful and simple connection between how long an object takes to orbit (orbital period) and how far it is from the center of the orbit (orbital radius). This law is useful for: - Predicting satellite orbits - Estimating the masses of planets and stars - Understanding the structure of planetary systems \ud83d\udcd8 Theory To understand the relationship between orbital period and radius, we begin with Newton's Law of Gravity and circular motion. 1. Gravitational Force The force of gravity between two objects is: \\[ F = \\frac{G \\cdot M \\cdot m}{r^2} \\] G : Gravitational constant M : Mass of the central object (like a planet) m : Mass of the orbiting object (like a satellite) r : Distance between the centers of the objects 2. Centripetal Force For an object to move in a circle, a force must constantly pull it toward the center. This is called centripetal force: \\[ F = \\frac{m \\cdot v^2}{r} \\] v : Orbital speed 3. Equating the Forces In a stable circular orbit, the gravitational force provides the centripetal force: \\[ \\frac{G \\cdot M \\cdot m}{r^2} = \\frac{m \\cdot v^2}{r} \\] Cancel m and simplify: \\[ v^2 = \\frac{G \\cdot M}{r} \\] 4. Orbital Period The orbital period T is the time it takes to complete one full circle. The orbit path is the circumference of a circle: \\[ \\text{Distance} = 2 \\pi r \\] So: \\[ T = \\frac{2 \\pi r}{v} \\] Substitute v from the previous step: \\[ T = \\frac{2 \\pi r}{\\sqrt{\\frac{G \\cdot M}{r}}} \\] Simplify: \\[ T = 2 \\pi \\sqrt{\\frac{r^3}{G \\cdot M}} \\] \u2705 Final Formula: Kepler\u2019s Third Law Now square both sides: \\[ T^2 = \\frac{4 \\pi^2 \\cdot r^3}{G \\cdot M} \\] This shows that the square of the orbital period is proportional to the cube of the orbital radius. \ud83d\udd0d Real-World Example: The Moon Distance to Earth: r = 384400 km Orbital period: T = 27.3 days If we plug into the formula, the numbers match reality, confirming Kepler\u2019s Law. \ud83d\udda5\ufe0f Computational Model (Python Preview) Visit my Collab import numpy as np import matplotlib.pyplot as plt # \ud83c\udf0d Constants G = 6.67430e-11 # Gravitational constant, in m^3/(kg\u00b7s^2) M = 5.972e24 # Mass of the Earth, in kg # \ud83d\udccf Create an array of orbital radii from 10 million to 500 million meters radii = np.linspace(1e7, 5e8, 100) # \ud83d\udd52 Calculate orbital periods using the formula: # T = 2\u03c0 * sqrt(r^3 / (G * M)) periods = 2 * np.pi * np.sqrt(radii**3 / (G * M)) # \ud83d\udcc8 Plot T\u00b2 vs r\u00b3 according to Kepler\u2019s Third Law plt.figure(figsize=(8, 5)) plt.plot(radii, periods**2, color='blue', label=r'$T^2$ vs $r^3$') plt.xlabel(\"Orbital Radius (m)\") plt.ylabel(\"Orbital Period Squared (s\u00b2)\") plt.title(\"Kepler's Third Law - Circular Orbit Simulation\") plt.grid(True) plt.legend() plt.tight_layout() plt.show() GRAVITY PROBLEM 1: A COSMIC INVESTIGATION 1. DERIVING KEPLER\u2019S THIRD LAW We begin by equating two fundamental forces: Gravitational Force: F = GMm / r\u00b2 Centripetal Force: F = mv\u00b2 / r Setting them equal: mv\u00b2 / r = GMm / r\u00b2 \u2192 v\u00b2 = GM / r Now use the formula for the orbital period: T = 2\u03c0r / v Squaring both sides: T\u00b2 = (4\u03c0\u00b2r\u00b2) / v\u00b2 = 4\u03c0\u00b2r\u00b3 / GM Therefore, Kepler's Third Law is: T\u00b2 = (4\u03c0\u00b2 / GM) * a\u00b3 2. VERIFICATION OF KEPLER\u2019S LAW USING PLANETARY DATA Using data for the inner planets: Planet T (years) a (AU) T\u00b2 a\u00b3 Mercury 0.2408 0.387 0.058 0.058 Venus 0.6152 0.723 0.378 0.378 Earth 1.000 1.000 1.000 1.000 Mars 1.8808 1.524 3.537 3.539 Observation: When \\( T\u00b2 \\) is plotted against \\( a\u00b3 \\) , the result is a straight line. Conclusion: T\u00b2 \u221d a\u00b3 Visit my Collab import numpy as np import matplotlib.pyplot as plt # Planet data planets = ['Mercury', 'Venus', 'Earth', 'Mars'] T_years = [0.2408, 0.6152, 1.000, 1.8808] # Orbital periods in Earth years a_AU = [0.387, 0.723, 1.000, 1.524] # Semi-major axes in astronomical units (AU) # Calculate T^2 and a^3 T_squared = [T**2 for T in T_years] a_cubed = [a**3 for a in a_AU] # Plotting the graph plt.figure(figsize=(8, 6)) plt.plot(a_cubed, T_squared, 'o-', color='dodgerblue', label='Planets') # Annotate each planet for i, name in enumerate(planets): plt.text(a_cubed[i] * 1.02, T_squared[i] * 0.98, name) # Add labels, title, grid, and reference line plt.title(\"Kepler's 3rd Law: $T^2$ vs $a^3$\", fontsize=14) plt.xlabel(\"$a^3$ (AU\u00b3)\", fontsize=12) plt.ylabel(\"$T^2$ (Years\u00b2)\", fontsize=12) plt.grid(True) # Expected reference line with slope = 1 (perfect linear relation) plt.axline((0, 0), slope=1, color='gray', linestyle='--', label='Expected line (slope = 1)') plt.legend() plt.tight_layout() plt.show() 3. CALCULATING THE MASS OF THE SUN We use Earth\u2019s orbit: a = 1.496 \u00d7 10\u00b9\u00b9 m T = 365.25 days = 3.156 \u00d7 10\u2077 s G = 6.674 \u00d7 10\u207b\u00b9\u00b9 m\u00b3/kg/s\u00b2 Using: M = (4\u03c0\u00b2a\u00b3) / (G T\u00b2) Result: M \u2248 1.99 \u00d7 10\u00b3\u2070 kg \u2705 Matches the actual mass of the Sun. 4. CALCULATING THE MASS OF THE EARTH Using the Moon\u2019s orbit: a = 3.84 \u00d7 10\u2078 m T = 27.32 days = 2.36 \u00d7 10\u2076 s Using the same formula: M = (4\u03c0\u00b2a\u00b3) / (G T\u00b2) Result: M \u2248 6.01 \u00d7 10\u00b2\u2074 kg \u2705 Matches the known mass of the Earth. CONCLUSION Kepler\u2019s 3rd Law accurately describes the motion of celestial bodies. Using simple orbital data, we were able to estimate the masses of both the Sun and the Earth with excellent accuracy. This demonstrates the power of physics in understanding the universe.","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#gravity","text":"","title":"\ud83c\udf0c Gravity"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1-orbital-period-and-orbital-radius","text":"","title":"Problem 1: Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#motivation","text":"Understanding the motion of celestial bodies is essential in astronomy and space exploration. Kepler's Third Law describes a powerful and simple connection between how long an object takes to orbit (orbital period) and how far it is from the center of the orbit (orbital radius). This law is useful for: - Predicting satellite orbits - Estimating the masses of planets and stars - Understanding the structure of planetary systems","title":"\ud83e\udde0 Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#theory","text":"To understand the relationship between orbital period and radius, we begin with Newton's Law of Gravity and circular motion.","title":"\ud83d\udcd8 Theory"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-gravitational-force","text":"The force of gravity between two objects is: \\[ F = \\frac{G \\cdot M \\cdot m}{r^2} \\] G : Gravitational constant M : Mass of the central object (like a planet) m : Mass of the orbiting object (like a satellite) r : Distance between the centers of the objects","title":"1. Gravitational Force"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-centripetal-force","text":"For an object to move in a circle, a force must constantly pull it toward the center. This is called centripetal force: \\[ F = \\frac{m \\cdot v^2}{r} \\] v : Orbital speed","title":"2. Centripetal Force"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-equating-the-forces","text":"In a stable circular orbit, the gravitational force provides the centripetal force: \\[ \\frac{G \\cdot M \\cdot m}{r^2} = \\frac{m \\cdot v^2}{r} \\] Cancel m and simplify: \\[ v^2 = \\frac{G \\cdot M}{r} \\]","title":"3. Equating the Forces"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-orbital-period","text":"The orbital period T is the time it takes to complete one full circle. The orbit path is the circumference of a circle: \\[ \\text{Distance} = 2 \\pi r \\] So: \\[ T = \\frac{2 \\pi r}{v} \\] Substitute v from the previous step: \\[ T = \\frac{2 \\pi r}{\\sqrt{\\frac{G \\cdot M}{r}}} \\] Simplify: \\[ T = 2 \\pi \\sqrt{\\frac{r^3}{G \\cdot M}} \\]","title":"4. Orbital Period"},{"location":"1%20Physics/2%20Gravity/Problem_1/#final-formula-keplers-third-law","text":"Now square both sides: \\[ T^2 = \\frac{4 \\pi^2 \\cdot r^3}{G \\cdot M} \\] This shows that the square of the orbital period is proportional to the cube of the orbital radius.","title":"\u2705 Final Formula: Kepler\u2019s Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#real-world-example-the-moon","text":"Distance to Earth: r = 384400 km Orbital period: T = 27.3 days If we plug into the formula, the numbers match reality, confirming Kepler\u2019s Law.","title":"\ud83d\udd0d Real-World Example: The Moon"},{"location":"1%20Physics/2%20Gravity/Problem_1/#computational-model-python-preview","text":"Visit my Collab import numpy as np import matplotlib.pyplot as plt # \ud83c\udf0d Constants G = 6.67430e-11 # Gravitational constant, in m^3/(kg\u00b7s^2) M = 5.972e24 # Mass of the Earth, in kg # \ud83d\udccf Create an array of orbital radii from 10 million to 500 million meters radii = np.linspace(1e7, 5e8, 100) # \ud83d\udd52 Calculate orbital periods using the formula: # T = 2\u03c0 * sqrt(r^3 / (G * M)) periods = 2 * np.pi * np.sqrt(radii**3 / (G * M)) # \ud83d\udcc8 Plot T\u00b2 vs r\u00b3 according to Kepler\u2019s Third Law plt.figure(figsize=(8, 5)) plt.plot(radii, periods**2, color='blue', label=r'$T^2$ vs $r^3$') plt.xlabel(\"Orbital Radius (m)\") plt.ylabel(\"Orbital Period Squared (s\u00b2)\") plt.title(\"Kepler's Third Law - Circular Orbit Simulation\") plt.grid(True) plt.legend() plt.tight_layout() plt.show()","title":"\ud83d\udda5\ufe0f Computational Model (Python Preview)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#gravity-problem-1-a-cosmic-investigation","text":"","title":"GRAVITY PROBLEM 1: A COSMIC INVESTIGATION"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-deriving-keplers-third-law","text":"We begin by equating two fundamental forces: Gravitational Force: F = GMm / r\u00b2 Centripetal Force: F = mv\u00b2 / r Setting them equal: mv\u00b2 / r = GMm / r\u00b2 \u2192 v\u00b2 = GM / r Now use the formula for the orbital period: T = 2\u03c0r / v Squaring both sides: T\u00b2 = (4\u03c0\u00b2r\u00b2) / v\u00b2 = 4\u03c0\u00b2r\u00b3 / GM Therefore, Kepler's Third Law is: T\u00b2 = (4\u03c0\u00b2 / GM) * a\u00b3","title":"1. DERIVING KEPLER\u2019S THIRD LAW"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-verification-of-keplers-law-using-planetary-data","text":"Using data for the inner planets: Planet T (years) a (AU) T\u00b2 a\u00b3 Mercury 0.2408 0.387 0.058 0.058 Venus 0.6152 0.723 0.378 0.378 Earth 1.000 1.000 1.000 1.000 Mars 1.8808 1.524 3.537 3.539 Observation: When \\( T\u00b2 \\) is plotted against \\( a\u00b3 \\) , the result is a straight line. Conclusion: T\u00b2 \u221d a\u00b3 Visit my Collab import numpy as np import matplotlib.pyplot as plt # Planet data planets = ['Mercury', 'Venus', 'Earth', 'Mars'] T_years = [0.2408, 0.6152, 1.000, 1.8808] # Orbital periods in Earth years a_AU = [0.387, 0.723, 1.000, 1.524] # Semi-major axes in astronomical units (AU) # Calculate T^2 and a^3 T_squared = [T**2 for T in T_years] a_cubed = [a**3 for a in a_AU] # Plotting the graph plt.figure(figsize=(8, 6)) plt.plot(a_cubed, T_squared, 'o-', color='dodgerblue', label='Planets') # Annotate each planet for i, name in enumerate(planets): plt.text(a_cubed[i] * 1.02, T_squared[i] * 0.98, name) # Add labels, title, grid, and reference line plt.title(\"Kepler's 3rd Law: $T^2$ vs $a^3$\", fontsize=14) plt.xlabel(\"$a^3$ (AU\u00b3)\", fontsize=12) plt.ylabel(\"$T^2$ (Years\u00b2)\", fontsize=12) plt.grid(True) # Expected reference line with slope = 1 (perfect linear relation) plt.axline((0, 0), slope=1, color='gray', linestyle='--', label='Expected line (slope = 1)') plt.legend() plt.tight_layout() plt.show()","title":"2. VERIFICATION OF KEPLER\u2019S LAW USING PLANETARY DATA"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-calculating-the-mass-of-the-sun","text":"We use Earth\u2019s orbit: a = 1.496 \u00d7 10\u00b9\u00b9 m T = 365.25 days = 3.156 \u00d7 10\u2077 s G = 6.674 \u00d7 10\u207b\u00b9\u00b9 m\u00b3/kg/s\u00b2 Using: M = (4\u03c0\u00b2a\u00b3) / (G T\u00b2) Result: M \u2248 1.99 \u00d7 10\u00b3\u2070 kg \u2705 Matches the actual mass of the Sun.","title":"3. CALCULATING THE MASS OF THE SUN"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-calculating-the-mass-of-the-earth","text":"Using the Moon\u2019s orbit: a = 3.84 \u00d7 10\u2078 m T = 27.32 days = 2.36 \u00d7 10\u2076 s Using the same formula: M = (4\u03c0\u00b2a\u00b3) / (G T\u00b2) Result: M \u2248 6.01 \u00d7 10\u00b2\u2074 kg \u2705 Matches the known mass of the Earth.","title":"4. CALCULATING THE MASS OF THE EARTH"},{"location":"1%20Physics/2%20Gravity/Problem_1/#conclusion","text":"Kepler\u2019s 3rd Law accurately describes the motion of celestial bodies. Using simple orbital data, we were able to estimate the masses of both the Sun and the Earth with excellent accuracy. This demonstrates the power of physics in understanding the universe.","title":"CONCLUSION"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2 \u2139\ufe0f Why the \"Motivation\" and \"Why Cosmic Velocities Matter\" Sections are Important \ud83d\udcd8 Motivation \ud83d\udd39 What is it? This section explains why the topic is important , why it matters, and where it is applied. \ud83d\udd39 Why is it needed? Helps the reader get into the topic . Explains why cosmic velocities are important to study . Makes the project more meaningful and complete . Answers the question: \"Why should I care about this?\" \ud83d\udd39 Alternative If you want, you can replace it with a short introduction like: This work discusses the speeds needed to reach orbit, escape a planet's gravity, and leave the solar system. \u2753 Why Cosmic Velocities Matter \ud83d\udd39 What is it? This concluding section shows the practical value of the entire work. \ud83d\udd39 Why is it needed? Connects formulas and calculations with real-life applications . Shows where they are used: First cosmic velocity \u2014 for satellites and orbits. Second cosmic velocity \u2014 for missions to the Moon and Mars. Third cosmic velocity \u2014 for missions beyond the solar system (e.g., Voyager). \ud83d\udd39 Benefits for the project Helps understand the meaning behind the calculations . Makes the report complete and logical . Creates a better impression during the defense . \ud83d\udd39 How to simplify it These velocities are important for space exploration because they help us understand the speeds required to launch satellites, send rockets to other planets, or even beyond the solar system. \u2705 These sections make your work not just \"formula-based\" but meaningful and engaging .","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#i-why-the-motivation-and-why-cosmic-velocities-matter-sections-are-important","text":"","title":"\u2139\ufe0f Why the \"Motivation\" and \"Why Cosmic Velocities Matter\" Sections are Important"},{"location":"1%20Physics/2%20Gravity/Problem_2/#motivation","text":"","title":"\ud83d\udcd8 Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#what-is-it","text":"This section explains why the topic is important , why it matters, and where it is applied.","title":"\ud83d\udd39 What is it?"},{"location":"1%20Physics/2%20Gravity/Problem_2/#why-is-it-needed","text":"Helps the reader get into the topic . Explains why cosmic velocities are important to study . Makes the project more meaningful and complete . Answers the question: \"Why should I care about this?\"","title":"\ud83d\udd39 Why is it needed?"},{"location":"1%20Physics/2%20Gravity/Problem_2/#alternative","text":"If you want, you can replace it with a short introduction like: This work discusses the speeds needed to reach orbit, escape a planet's gravity, and leave the solar system.","title":"\ud83d\udd39 Alternative"},{"location":"1%20Physics/2%20Gravity/Problem_2/#why-cosmic-velocities-matter","text":"","title":"\u2753 Why Cosmic Velocities Matter"},{"location":"1%20Physics/2%20Gravity/Problem_2/#what-is-it_1","text":"This concluding section shows the practical value of the entire work.","title":"\ud83d\udd39 What is it?"},{"location":"1%20Physics/2%20Gravity/Problem_2/#why-is-it-needed_1","text":"Connects formulas and calculations with real-life applications . Shows where they are used: First cosmic velocity \u2014 for satellites and orbits. Second cosmic velocity \u2014 for missions to the Moon and Mars. Third cosmic velocity \u2014 for missions beyond the solar system (e.g., Voyager).","title":"\ud83d\udd39 Why is it needed?"},{"location":"1%20Physics/2%20Gravity/Problem_2/#benefits-for-the-project","text":"Helps understand the meaning behind the calculations . Makes the report complete and logical . Creates a better impression during the defense .","title":"\ud83d\udd39 Benefits for the project"},{"location":"1%20Physics/2%20Gravity/Problem_2/#how-to-simplify-it","text":"These velocities are important for space exploration because they help us understand the speeds required to launch satellites, send rockets to other planets, or even beyond the solar system. \u2705 These sections make your work not just \"formula-based\" but meaningful and engaging .","title":"\ud83d\udd39 How to simplify it"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1 Problem 1: Interference Patterns on a Water Surface Motivation: Interference patterns form when waves from different sources overlap, creating new wave patterns on a surface. On water, this can be easily observed when ripples from different points meet and combine. Depending on their phase relationship, the waves may either reinforce (constructive interference) or cancel each other out (destructive interference). This concept helps us visualize wave behavior, understand phase relationships, and provides insight into real-world applications such as sound waves, electromagnetic waves, and water ripples. Task Breakdown: 1. Select a Regular Polygon: We begin by selecting a regular polygon (for example, an equilateral triangle, square, or pentagon) where point sources of waves will be placed at the vertices. 2. Position the Sources: We then place wave sources at the vertices of the polygon, assuming that each source emits a wave with the same amplitude, wavelength, and frequency. 3. Wave Equations: Each point source emits a wave that can be described by the equation for a circular wave in the water surface. The displacement at a point \\((x, y)\\) on the water surface due to a point source at \\((x_i, y_i)\\) is given by: \\[ \\text{Displacement} = A \\cos(k r - \\omega t + \\phi) \\] Where: - \\(A\\) is the amplitude, - \\(k = \\frac{2\\pi}{\\lambda}\\) is the wave number, - \\(\\lambda\\) is the wavelength, - \\(r = \\sqrt{(x - x_i)^2 + (y - y_i)^2}\\) is the distance from the source to the point, - \\(\\omega = 2\\pi f\\) is the angular frequency, - \\(f\\) is the frequency, and - \\(\\phi\\) is the initial phase of the wave. 4. Superposition of Waves: The principle of superposition states that the total displacement at any point is the sum of the displacements from each source. Therefore, for \\(N\\) sources placed at the vertices of the polygon, the total displacement is: \\[ \\text{Total Displacement} = \\sum_{i=1}^{N} A \\cos(k r_i - \\omega t + \\phi) \\] Where \\(r_i\\) is the distance from the \\(i\\) -th source to the point \\((x, y)\\) . 5. Analyze Interference Patterns: The superimposed wave function will exhibit regions of constructive interference (where the displacements add up to amplify the wave) and destructive interference (where the displacements cancel each other out). By analyzing this, we can understand the pattern of wave interaction. 6. Visualization: We can visualize the interference patterns by plotting the total displacement at each point on a grid, where the x and y axes represent spatial coordinates on the water surface. Implementation in Python: Below is the Python code to simulate and visualize the interference patterns caused by multiple point sources located at the vertices of a regular polygon (e.g., square). This simulation assumes that all sources emit waves with the same parameters. python import numpy as np import matplotlib.pyplot as plt Constants A = 1 # Amplitude of the wave lambda_ = 1 # Wavelength f = 1 # Frequency omega = 2 * np.pi * f # Angular frequency k = 2 * np.pi / lambda_ # Wave number phi = 0 # Initial phase of the wave radius = 5 # Radius of the circle where the sources are placed num_sources = 4 # Number of sources (e.g., 4 for a square) grid_size = 200 # Grid size for the plot (increase for higher resolution) Create a grid of points (x, y) x = np.linspace(-10, 10, grid_size) y = np.linspace(-10, 10, grid_size) X, Y = np.meshgrid(x, y) Calculate the coordinates of the sources (vertices of the regular polygon) theta = np.linspace(0, 2 * np.pi, num_sources, endpoint=False) source_x = radius * np.cos(theta) source_y = radius * np.sin(theta) Function to calculate wave displacement at a point (x, y) due to a source def wave_displacement(x, y, source_x, source_y, A, k, omega, t, phi): r = np.sqrt((x - source_x) 2 + (y - source_y) 2) # Distance from the source return A * np.cos(k * r - omega * t + phi) # Wave displacement equation Create a grid to store the displacement displacement = np.zeros_like(X) Time t = 0 Calculate the total displacement due to all sources using superposition for i in range(num_sources): displacement += wave_displacement(X, Y, source_x[i], source_y[i], A, k, omega, t, phi) Plotting the interference pattern plt.figure(figsize=(10, 8)) plt.contourf(X, Y, displacement, cmap='twilight', levels=100) # Contour plot with twilight colormap plt.colorbar(label=\"Wave Displacement\", pad=0.01, aspect=10) # Color bar Plot sources as bright markers (bigger and highlighted) plt.scatter(source_x, source_y, color=\"yellow\", edgecolors=\"black\", s=100, label=\"Wave Sources\", zorder=5) Add title and labels with improved font style plt.title(\"Interference Pattern on a Water Surface\", fontsize=16, fontweight='bold') plt.xlabel(\"X Position (Units)\", fontsize=12) plt.ylabel(\"Y Position (Units)\", fontsize=12) Grid and axis customization plt.grid(True, which='both', linestyle='--', linewidth=0.5, color='gray', alpha=0.7) plt.axhline(0, color='black',linewidth=1) plt.axvline(0, color='black',linewidth=1) Add a legend with a customized style plt.legend(fontsize=12, frameon=True, facecolor='white', edgecolor='black') Add a subtitle explaining the plot plt.figtext(0.5, 0.02, \"This plot shows the interference pattern formed by waves from a regular polygon of sources.\", ha=\"center\", fontsize=12, color='darkslategray') Show the plot plt.tight_layout() plt.show() Key Features of the Code: Grid Creation : A mesh grid is created over a specified range of x and y values. This represents the water surface where the interference pattern will be plotted. Wave Function : The displacement due to each source is calculated based on the wave equation. The distance between each point on the grid and the source is calculated to determine the wave displacement. Superposition : The total wave displacement is calculated by summing the contributions from each point source. Visualization : The contourf function is used to plot the interference pattern, which is color-coded to show regions of constructive and destructive interference. The sources are marked as yellow points for clear identification. Customization : The plot is customized with labels, grid lines, legends, and a color bar for better clarity and aesthetics.","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1-interference-patterns-on-a-water-surface","text":"","title":"Problem 1: Interference Patterns on a Water Surface"},{"location":"1%20Physics/3%20Waves/Problem_1/#motivation","text":"Interference patterns form when waves from different sources overlap, creating new wave patterns on a surface. On water, this can be easily observed when ripples from different points meet and combine. Depending on their phase relationship, the waves may either reinforce (constructive interference) or cancel each other out (destructive interference). This concept helps us visualize wave behavior, understand phase relationships, and provides insight into real-world applications such as sound waves, electromagnetic waves, and water ripples.","title":"Motivation:"},{"location":"1%20Physics/3%20Waves/Problem_1/#task-breakdown","text":"","title":"Task Breakdown:"},{"location":"1%20Physics/3%20Waves/Problem_1/#1-select-a-regular-polygon","text":"We begin by selecting a regular polygon (for example, an equilateral triangle, square, or pentagon) where point sources of waves will be placed at the vertices.","title":"1. Select a Regular Polygon:"},{"location":"1%20Physics/3%20Waves/Problem_1/#2-position-the-sources","text":"We then place wave sources at the vertices of the polygon, assuming that each source emits a wave with the same amplitude, wavelength, and frequency.","title":"2. Position the Sources:"},{"location":"1%20Physics/3%20Waves/Problem_1/#3-wave-equations","text":"Each point source emits a wave that can be described by the equation for a circular wave in the water surface. The displacement at a point \\((x, y)\\) on the water surface due to a point source at \\((x_i, y_i)\\) is given by: \\[ \\text{Displacement} = A \\cos(k r - \\omega t + \\phi) \\] Where: - \\(A\\) is the amplitude, - \\(k = \\frac{2\\pi}{\\lambda}\\) is the wave number, - \\(\\lambda\\) is the wavelength, - \\(r = \\sqrt{(x - x_i)^2 + (y - y_i)^2}\\) is the distance from the source to the point, - \\(\\omega = 2\\pi f\\) is the angular frequency, - \\(f\\) is the frequency, and - \\(\\phi\\) is the initial phase of the wave.","title":"3. Wave Equations:"},{"location":"1%20Physics/3%20Waves/Problem_1/#4-superposition-of-waves","text":"The principle of superposition states that the total displacement at any point is the sum of the displacements from each source. Therefore, for \\(N\\) sources placed at the vertices of the polygon, the total displacement is: \\[ \\text{Total Displacement} = \\sum_{i=1}^{N} A \\cos(k r_i - \\omega t + \\phi) \\] Where \\(r_i\\) is the distance from the \\(i\\) -th source to the point \\((x, y)\\) .","title":"4. Superposition of Waves:"},{"location":"1%20Physics/3%20Waves/Problem_1/#5-analyze-interference-patterns","text":"The superimposed wave function will exhibit regions of constructive interference (where the displacements add up to amplify the wave) and destructive interference (where the displacements cancel each other out). By analyzing this, we can understand the pattern of wave interaction.","title":"5. Analyze Interference Patterns:"},{"location":"1%20Physics/3%20Waves/Problem_1/#6-visualization","text":"We can visualize the interference patterns by plotting the total displacement at each point on a grid, where the x and y axes represent spatial coordinates on the water surface.","title":"6. Visualization:"},{"location":"1%20Physics/3%20Waves/Problem_1/#implementation-in-python","text":"Below is the Python code to simulate and visualize the interference patterns caused by multiple point sources located at the vertices of a regular polygon (e.g., square). This simulation assumes that all sources emit waves with the same parameters. python import numpy as np import matplotlib.pyplot as plt","title":"Implementation in Python:"},{"location":"1%20Physics/3%20Waves/Problem_1/#constants","text":"A = 1 # Amplitude of the wave lambda_ = 1 # Wavelength f = 1 # Frequency omega = 2 * np.pi * f # Angular frequency k = 2 * np.pi / lambda_ # Wave number phi = 0 # Initial phase of the wave radius = 5 # Radius of the circle where the sources are placed num_sources = 4 # Number of sources (e.g., 4 for a square) grid_size = 200 # Grid size for the plot (increase for higher resolution)","title":"Constants"},{"location":"1%20Physics/3%20Waves/Problem_1/#create-a-grid-of-points-x-y","text":"x = np.linspace(-10, 10, grid_size) y = np.linspace(-10, 10, grid_size) X, Y = np.meshgrid(x, y)","title":"Create a grid of points (x, y)"},{"location":"1%20Physics/3%20Waves/Problem_1/#calculate-the-coordinates-of-the-sources-vertices-of-the-regular-polygon","text":"theta = np.linspace(0, 2 * np.pi, num_sources, endpoint=False) source_x = radius * np.cos(theta) source_y = radius * np.sin(theta)","title":"Calculate the coordinates of the sources (vertices of the regular polygon)"},{"location":"1%20Physics/3%20Waves/Problem_1/#function-to-calculate-wave-displacement-at-a-point-x-y-due-to-a-source","text":"def wave_displacement(x, y, source_x, source_y, A, k, omega, t, phi): r = np.sqrt((x - source_x) 2 + (y - source_y) 2) # Distance from the source return A * np.cos(k * r - omega * t + phi) # Wave displacement equation","title":"Function to calculate wave displacement at a point (x, y) due to a source"},{"location":"1%20Physics/3%20Waves/Problem_1/#create-a-grid-to-store-the-displacement","text":"displacement = np.zeros_like(X)","title":"Create a grid to store the displacement"},{"location":"1%20Physics/3%20Waves/Problem_1/#time","text":"t = 0","title":"Time"},{"location":"1%20Physics/3%20Waves/Problem_1/#calculate-the-total-displacement-due-to-all-sources-using-superposition","text":"for i in range(num_sources): displacement += wave_displacement(X, Y, source_x[i], source_y[i], A, k, omega, t, phi)","title":"Calculate the total displacement due to all sources using superposition"},{"location":"1%20Physics/3%20Waves/Problem_1/#plotting-the-interference-pattern","text":"plt.figure(figsize=(10, 8)) plt.contourf(X, Y, displacement, cmap='twilight', levels=100) # Contour plot with twilight colormap plt.colorbar(label=\"Wave Displacement\", pad=0.01, aspect=10) # Color bar","title":"Plotting the interference pattern"},{"location":"1%20Physics/3%20Waves/Problem_1/#plot-sources-as-bright-markers-bigger-and-highlighted","text":"plt.scatter(source_x, source_y, color=\"yellow\", edgecolors=\"black\", s=100, label=\"Wave Sources\", zorder=5)","title":"Plot sources as bright markers (bigger and highlighted)"},{"location":"1%20Physics/3%20Waves/Problem_1/#add-title-and-labels-with-improved-font-style","text":"plt.title(\"Interference Pattern on a Water Surface\", fontsize=16, fontweight='bold') plt.xlabel(\"X Position (Units)\", fontsize=12) plt.ylabel(\"Y Position (Units)\", fontsize=12)","title":"Add title and labels with improved font style"},{"location":"1%20Physics/3%20Waves/Problem_1/#grid-and-axis-customization","text":"plt.grid(True, which='both', linestyle='--', linewidth=0.5, color='gray', alpha=0.7) plt.axhline(0, color='black',linewidth=1) plt.axvline(0, color='black',linewidth=1)","title":"Grid and axis customization"},{"location":"1%20Physics/3%20Waves/Problem_1/#add-a-legend-with-a-customized-style","text":"plt.legend(fontsize=12, frameon=True, facecolor='white', edgecolor='black')","title":"Add a legend with a customized style"},{"location":"1%20Physics/3%20Waves/Problem_1/#add-a-subtitle-explaining-the-plot","text":"plt.figtext(0.5, 0.02, \"This plot shows the interference pattern formed by waves from a regular polygon of sources.\", ha=\"center\", fontsize=12, color='darkslategray')","title":"Add a subtitle explaining the plot"},{"location":"1%20Physics/3%20Waves/Problem_1/#show-the-plot","text":"plt.tight_layout() plt.show()","title":"Show the plot"},{"location":"1%20Physics/3%20Waves/Problem_1/#key-features-of-the-code","text":"Grid Creation : A mesh grid is created over a specified range of x and y values. This represents the water surface where the interference pattern will be plotted. Wave Function : The displacement due to each source is calculated based on the wave equation. The distance between each point on the grid and the source is calculated to determine the wave displacement. Superposition : The total wave displacement is calculated by summing the contributions from each point source. Visualization : The contourf function is used to plot the interference pattern, which is color-coded to show regions of constructive and destructive interference. The sources are marked as yellow points for clear identification. Customization : The plot is customized with labels, grid lines, legends, and a color bar for better clarity and aesthetics.","title":"Key Features of the Code:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}