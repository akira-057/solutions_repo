{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 \ud83d\udccc Mechanics: Investigating the Range as a Function of the Angle of Projection \ud83c\udff9 Motivation Projectile motion appears simple, yet it encapsulates deep physical principles. By analyzing how the range of a projectile varies with its launch angle, we uncover fascinating relationships governed by linear and quadratic equations. These equations have broad applications, from sports (e.g., the trajectory of a soccer ball) to engineering (e.g., missile launch dynamics). \u2696 1. Theoretical Foundation \ud83d\udcdc Equations of Motion A projectile launched with an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) follows a parabolic trajectory under the influence of gravity. We derive its motion using Newton's laws. \ud83d\udd39 Horizontal Motion Since there is no acceleration in the horizontal direction (assuming no air resistance), the velocity remains constant: \\[ x(t) = v_0 \\cos\\theta \\cdot t \\] \ud83d\udd39 Vertical Motion The vertical motion is governed by constant acceleration due to gravity \\( g \\) : \\[ y(t) = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 \\] The projectile reaches the ground when \\( y = 0 \\) , solving for \\( t \\) : \\[ t_f = \\frac{2 v_0 \\sin\\theta}{g} \\] This is the total time of flight . \ud83d\udccf 2. Analysis of the Range The range \\( R \\) is the horizontal distance covered by the projectile when it lands: \\[ R = x(t_f) = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} \\] Using the identity \\( 2\\sin\\theta\\cos\\theta = \\sin 2\\theta \\) , we get: \\[ R = \\frac{v_0^2}{g} \\sin 2\\theta \\] \ud83d\udccc Key Observations: Maximum Range: The range is maximized when \\( \\sin 2\\theta = 1 \\) , i.e., \\( 2\\theta = 90^\\circ \\) \u2192 \\( \\theta = 45^\\circ \\) . Symmetry: The function \\( R(\\theta) \\) is symmetric around \\( 45^\\circ \\) , meaning \\( R(\\theta) = R(90^\\circ - \\theta) \\) . Effect of Initial Velocity: Since \\( R \\propto v_0^2 \\) , doubling \\( v_0 \\) quadruples the range. Effect of Gravity: Since \\( R \\propto \\frac{1}{g} \\) , projectiles travel farther on planets with lower gravity (e.g., the Moon). \ud83c\udf0e 3. Practical Applications Sports: Soccer: Kicking a ball at \\( 45^\\circ \\) for maximum distance. Basketball: Analyzing the optimal shooting angle. Engineering & Ballistics: Missile trajectories and range optimization. Water fountains and fluid mechanics. Astrophysics: Moon landings require adjusting launch angles based on gravity. \ud83d\udcbb 4. Implementation (Python Simulation) Below is a Python script to simulate the projectile range as a function of \\( \\theta \\) : python import numpy as np import matplotlib.pyplot as plt Constants v0 = 20 # Initial velocity (m/s) g = 9.81 # Gravity (m/s\u00b2) Angles from 0 to 90 degrees theta = np.linspace(0, 90, 100) theta_rad = np.radians(theta) # Convert to radians Compute range for each angle R = (v0**2 / g) * np.sin(2 * theta_rad) Plot results plt.figure(figsize=(8, 5)) plt.plot(theta, R, label=r'Range \\(R = \\frac{v_0^2}{g} \\sin 2\\theta\\) ', color='b') plt.axvline(45, linestyle=\"--\", color=\"r\", label=r'Maximum at \\(\\theta = 45^\\circ\\) ') plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Launch Angle\") plt.legend() plt.grid() plt.show() \ud83d\udcca 5. Results and Discussion \ud83d\udd39 Graph Interpretation The maximum range occurs at \\( \\theta = 45^\\circ \\) . The function is symmetric about \\( 45^\\circ \\) . Higher \\( v_0 \\) increases range quadratically. \ud83d\udd39 Limitations of the Model Assumes no air resistance . Assumes flat terrain (ignores hills, obstacles). Ignores wind effects , which can alter trajectories. \ud83d\udd39 Enhancements Add air drag to create more realistic simulations. Consider launches from elevated platforms (e.g., artillery firing from a hill). \ud83c\udfaf Conclusion This study shows how the range of a projectile depends on launch angle, initial velocity, and gravity. The ideal case follows the classic \\( R = \\frac{v_0^2}{g} \\sin 2\\theta \\) relation, peaking at \\( 45^\\circ \\) . However, real-world factors like air resistance modify this behavior, making computational modeling essential for accurate predictions.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#mechanics-investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"\ud83d\udccc Mechanics: Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#motivation","text":"Projectile motion appears simple, yet it encapsulates deep physical principles. By analyzing how the range of a projectile varies with its launch angle, we uncover fascinating relationships governed by linear and quadratic equations. These equations have broad applications, from sports (e.g., the trajectory of a soccer ball) to engineering (e.g., missile launch dynamics).","title":"\ud83c\udff9 Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"\u2696 1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#equations-of-motion","text":"A projectile launched with an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) follows a parabolic trajectory under the influence of gravity. We derive its motion using Newton's laws.","title":"\ud83d\udcdc Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-motion","text":"Since there is no acceleration in the horizontal direction (assuming no air resistance), the velocity remains constant: \\[ x(t) = v_0 \\cos\\theta \\cdot t \\]","title":"\ud83d\udd39 Horizontal Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-motion","text":"The vertical motion is governed by constant acceleration due to gravity \\( g \\) : \\[ y(t) = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 \\] The projectile reaches the ground when \\( y = 0 \\) , solving for \\( t \\) : \\[ t_f = \\frac{2 v_0 \\sin\\theta}{g} \\] This is the total time of flight .","title":"\ud83d\udd39 Vertical Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The range \\( R \\) is the horizontal distance covered by the projectile when it lands: \\[ R = x(t_f) = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} \\] Using the identity \\( 2\\sin\\theta\\cos\\theta = \\sin 2\\theta \\) , we get: \\[ R = \\frac{v_0^2}{g} \\sin 2\\theta \\]","title":"\ud83d\udccf 2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#key-observations","text":"Maximum Range: The range is maximized when \\( \\sin 2\\theta = 1 \\) , i.e., \\( 2\\theta = 90^\\circ \\) \u2192 \\( \\theta = 45^\\circ \\) . Symmetry: The function \\( R(\\theta) \\) is symmetric around \\( 45^\\circ \\) , meaning \\( R(\\theta) = R(90^\\circ - \\theta) \\) . Effect of Initial Velocity: Since \\( R \\propto v_0^2 \\) , doubling \\( v_0 \\) quadruples the range. Effect of Gravity: Since \\( R \\propto \\frac{1}{g} \\) , projectiles travel farther on planets with lower gravity (e.g., the Moon).","title":"\ud83d\udccc Key Observations:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Sports: Soccer: Kicking a ball at \\( 45^\\circ \\) for maximum distance. Basketball: Analyzing the optimal shooting angle. Engineering & Ballistics: Missile trajectories and range optimization. Water fountains and fluid mechanics. Astrophysics: Moon landings require adjusting launch angles based on gravity.","title":"\ud83c\udf0e 3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation-python-simulation","text":"Below is a Python script to simulate the projectile range as a function of \\( \\theta \\) : python import numpy as np import matplotlib.pyplot as plt","title":"\ud83d\udcbb 4. Implementation (Python Simulation)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#constants","text":"v0 = 20 # Initial velocity (m/s) g = 9.81 # Gravity (m/s\u00b2)","title":"Constants"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#angles-from-0-to-90-degrees","text":"theta = np.linspace(0, 90, 100) theta_rad = np.radians(theta) # Convert to radians","title":"Angles from 0 to 90 degrees"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#compute-range-for-each-angle","text":"R = (v0**2 / g) * np.sin(2 * theta_rad)","title":"Compute range for each angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#plot-results","text":"plt.figure(figsize=(8, 5)) plt.plot(theta, R, label=r'Range \\(R = \\frac{v_0^2}{g} \\sin 2\\theta\\) ', color='b') plt.axvline(45, linestyle=\"--\", color=\"r\", label=r'Maximum at \\(\\theta = 45^\\circ\\) ') plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Launch Angle\") plt.legend() plt.grid() plt.show()","title":"Plot results"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-results-and-discussion","text":"","title":"\ud83d\udcca 5. Results and Discussion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#graph-interpretation","text":"The maximum range occurs at \\( \\theta = 45^\\circ \\) . The function is symmetric about \\( 45^\\circ \\) . Higher \\( v_0 \\) increases range quadratically.","title":"\ud83d\udd39 Graph Interpretation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#limitations-of-the-model","text":"Assumes no air resistance . Assumes flat terrain (ignores hills, obstacles). Ignores wind effects , which can alter trajectories.","title":"\ud83d\udd39 Limitations of the Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#enhancements","text":"Add air drag to create more realistic simulations. Consider launches from elevated platforms (e.g., artillery firing from a hill).","title":"\ud83d\udd39 Enhancements"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"This study shows how the range of a projectile depends on launch angle, initial velocity, and gravity. The ideal case follows the classic \\( R = \\frac{v_0^2}{g} \\sin 2\\theta \\) relation, peaking at \\( 45^\\circ \\) . However, real-world factors like air resistance modify this behavior, making computational modeling essential for accurate predictions.","title":"\ud83c\udfaf Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 \ud83d\udccc Investigating the Dynamics of a Forced Damped Pendulum \ud83c\udfd7 Motivation The forced damped pendulum is a fascinating system that exhibits a range of behaviors, from simple oscillations to chaotic motion. By introducing damping and an external periodic force, we observe a transition from regular periodic motion to resonance, quasiperiodicity, and chaos . This system is crucial for understanding: - Resonance in mechanical systems (e.g., bridges, buildings under periodic stress). - Nonlinear dynamics and chaos theory (e.g., weather patterns, heart rhythms). - Energy harvesting from oscillations. \u2696 1. Theoretical Foundation \ud83d\udcdc Equation of Motion The forced damped pendulum follows the nonlinear differential equation: \\[ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\sin\\theta = A \\cos(\\omega t) \\] where: - \\( \\theta \\) = angular displacement - \\( \\gamma \\) = damping coefficient - \\( \\omega_0 \\) = natural frequency of the pendulum ( \\( \\omega_0 = \\sqrt{\\frac{g}{L}} \\) ) - \\( A \\) = amplitude of the external driving force - \\( \\omega \\) = driving frequency For small angles ( \\( \\theta \\approx \\sin\\theta \\) ), the equation simplifies to: \\[ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] which resembles the equation of a driven damped harmonic oscillator . \ud83d\udccc Resonance Condition Resonance occurs when the driving frequency \\( \\omega \\) matches the natural frequency \\( \\omega_0 \\) , leading to maximum energy absorption and large oscillations: \\[ \\omega_{\\text{res}} \\approx \\sqrt{\\omega_0^2 - \\frac{\\gamma^2}{4}} \\] At resonance, even small driving forces can produce large oscillations, which is crucial in mechanical engineering and structural safety . \ud83d\udcca 2. Analysis of Dynamics \ud83d\udd39 Effect of Damping ( \\( \\gamma \\) ) Low damping: The pendulum exhibits large oscillations and resonance. High damping: The system stabilizes quickly with reduced oscillations. \ud83d\udd39 Effect of Driving Amplitude ( \\( A \\) ) Low amplitude: The pendulum undergoes periodic motion. High amplitude: The system transitions into chaotic motion for certain frequencies. \ud83d\udd39 Effect of Driving Frequency ( \\( \\omega \\) ) When \\( \\omega \\approx \\omega_0 \\) , resonance occurs. When \\( \\omega \\) is far from \\( \\omega_0 \\) , the response is weak. Nonlinear behavior emerges at certain parameter values, leading to chaos. \ud83c\udf0d 3. Practical Applications Engineering & Structural Dynamics Bridges & Skyscrapers: Understanding how periodic forces (e.g., wind, earthquakes) affect large structures. Vibration Isolation: Designing materials that minimize resonance effects. Energy Harvesting Pendulum-based generators: Extracting energy from periodic motion. Ocean wave energy devices. Chaos Theory & Climate Models Weather prediction models involve nonlinear oscillatory behaviors similar to the forced pendulum. \ud83d\udcbb 4. Implementation (Python Simulation) Below is a Python script that simulates the motion of a forced damped pendulum using numerical integration (Runge-Kutta method) . \ud83d\udccc Step 1: Install Required Libraries Before running the code, install NumPy and Matplotlib if needed: bash pip install numpy matplotlib scipy \ud83d\udccc Step 2: Python Code for Simulation python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp Define system parameters g = 9.81 # Gravity (m/s\u00b2) L = 1.0 # Length of pendulum (m) gamma = 0.2 # Damping coefficient A = 1.5 # Driving amplitude omega = 2.0 # Driving frequency Define natural frequency omega_0 = np.sqrt(g / L) Define the equations of motion def forced_damped_pendulum(t, y): theta, omega_t = y dtheta_dt = omega_t domega_dt = -gamma * omega_t - omega_0**2 * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] Initial conditions: theta = 0.2 rad, omega = 0 rad/s y0 = [0.2, 0] Time span for simulation t_span = (0, 50) t_eval = np.linspace(0, 50, 1000) Solve ODE using Runge-Kutta method sol = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval, method='RK45') Extract results t = sol.t theta = sol.y[0] Plot results plt.figure(figsize=(10, 5)) plt.plot(t, theta, label=r' \\(\\theta(t)\\) ', color='b') plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.title(\"Forced Damped Pendulum Motion\") plt.legend() plt.grid() plt.show() \ud83d\udcca 5. Results and Discussion \ud83d\udd39 Graph Interpretation At low damping ( \\( \\gamma \\ll 1 \\) ), large oscillations appear due to resonance. At high forcing amplitude ( \\( A \\gg 1 \\) ), the motion becomes irregular and chaotic. At specific frequencies ( \\( \\omega \\approx \\omega_0 \\) ), resonance occurs. \ud83d\udd39 Phase Space Analysis (Pendulum Motion in Phase Space) To visualize chaotic behavior, we can plot phase portraits ( \\( \\theta \\) vs. \\( \\dot{\\theta} \\) ): python plt.figure(figsize=(6,6)) plt.plot(sol.y[0], sol.y[1], color='purple') plt.xlabel(r\" \\(\\theta\\) (rad)\") plt.ylabel(r\" \\(\\dot{\\theta}\\) (rad/s)\") plt.title(\"Phase Portrait of the Forced Damped Pendulum\") plt.grid() plt.show(","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"\ud83d\udccc Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#motivation","text":"The forced damped pendulum is a fascinating system that exhibits a range of behaviors, from simple oscillations to chaotic motion. By introducing damping and an external periodic force, we observe a transition from regular periodic motion to resonance, quasiperiodicity, and chaos . This system is crucial for understanding: - Resonance in mechanical systems (e.g., bridges, buildings under periodic stress). - Nonlinear dynamics and chaos theory (e.g., weather patterns, heart rhythms). - Energy harvesting from oscillations.","title":"\ud83c\udfd7 Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"\u2696 1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#equation-of-motion","text":"The forced damped pendulum follows the nonlinear differential equation: \\[ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\sin\\theta = A \\cos(\\omega t) \\] where: - \\( \\theta \\) = angular displacement - \\( \\gamma \\) = damping coefficient - \\( \\omega_0 \\) = natural frequency of the pendulum ( \\( \\omega_0 = \\sqrt{\\frac{g}{L}} \\) ) - \\( A \\) = amplitude of the external driving force - \\( \\omega \\) = driving frequency For small angles ( \\( \\theta \\approx \\sin\\theta \\) ), the equation simplifies to: \\[ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] which resembles the equation of a driven damped harmonic oscillator .","title":"\ud83d\udcdc Equation of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-condition","text":"Resonance occurs when the driving frequency \\( \\omega \\) matches the natural frequency \\( \\omega_0 \\) , leading to maximum energy absorption and large oscillations: \\[ \\omega_{\\text{res}} \\approx \\sqrt{\\omega_0^2 - \\frac{\\gamma^2}{4}} \\] At resonance, even small driving forces can produce large oscillations, which is crucial in mechanical engineering and structural safety .","title":"\ud83d\udccc Resonance Condition"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"","title":"\ud83d\udcca 2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#effect-of-damping-gamma","text":"Low damping: The pendulum exhibits large oscillations and resonance. High damping: The system stabilizes quickly with reduced oscillations.","title":"\ud83d\udd39 Effect of Damping (\\( \\gamma \\))"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#effect-of-driving-amplitude-a","text":"Low amplitude: The pendulum undergoes periodic motion. High amplitude: The system transitions into chaotic motion for certain frequencies.","title":"\ud83d\udd39 Effect of Driving Amplitude (\\( A \\))"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#effect-of-driving-frequency-omega","text":"When \\( \\omega \\approx \\omega_0 \\) , resonance occurs. When \\( \\omega \\) is far from \\( \\omega_0 \\) , the response is weak. Nonlinear behavior emerges at certain parameter values, leading to chaos.","title":"\ud83d\udd39 Effect of Driving Frequency (\\( \\omega \\))"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"Engineering & Structural Dynamics Bridges & Skyscrapers: Understanding how periodic forces (e.g., wind, earthquakes) affect large structures. Vibration Isolation: Designing materials that minimize resonance effects. Energy Harvesting Pendulum-based generators: Extracting energy from periodic motion. Ocean wave energy devices. Chaos Theory & Climate Models Weather prediction models involve nonlinear oscillatory behaviors similar to the forced pendulum.","title":"\ud83c\udf0d 3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation-python-simulation","text":"Below is a Python script that simulates the motion of a forced damped pendulum using numerical integration (Runge-Kutta method) .","title":"\ud83d\udcbb 4. Implementation (Python Simulation)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#step-1-install-required-libraries","text":"Before running the code, install NumPy and Matplotlib if needed: bash pip install numpy matplotlib scipy","title":"\ud83d\udccc Step 1: Install Required Libraries"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#step-2-python-code-for-simulation","text":"python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp","title":"\ud83d\udccc Step 2: Python Code for Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#define-system-parameters","text":"g = 9.81 # Gravity (m/s\u00b2) L = 1.0 # Length of pendulum (m) gamma = 0.2 # Damping coefficient A = 1.5 # Driving amplitude omega = 2.0 # Driving frequency","title":"Define system parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#define-natural-frequency","text":"omega_0 = np.sqrt(g / L)","title":"Define natural frequency"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#define-the-equations-of-motion","text":"def forced_damped_pendulum(t, y): theta, omega_t = y dtheta_dt = omega_t domega_dt = -gamma * omega_t - omega_0**2 * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt]","title":"Define the equations of motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#initial-conditions-theta-02-rad-omega-0-rads","text":"y0 = [0.2, 0]","title":"Initial conditions: theta = 0.2 rad, omega = 0 rad/s"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#time-span-for-simulation","text":"t_span = (0, 50) t_eval = np.linspace(0, 50, 1000)","title":"Time span for simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#solve-ode-using-runge-kutta-method","text":"sol = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval, method='RK45')","title":"Solve ODE using Runge-Kutta method"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#extract-results","text":"t = sol.t theta = sol.y[0]","title":"Extract results"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#plot-results","text":"plt.figure(figsize=(10, 5)) plt.plot(t, theta, label=r' \\(\\theta(t)\\) ', color='b') plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.title(\"Forced Damped Pendulum Motion\") plt.legend() plt.grid() plt.show()","title":"Plot results"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-results-and-discussion","text":"","title":"\ud83d\udcca 5. Results and Discussion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#graph-interpretation","text":"At low damping ( \\( \\gamma \\ll 1 \\) ), large oscillations appear due to resonance. At high forcing amplitude ( \\( A \\gg 1 \\) ), the motion becomes irregular and chaotic. At specific frequencies ( \\( \\omega \\approx \\omega_0 \\) ), resonance occurs.","title":"\ud83d\udd39 Graph Interpretation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#phase-space-analysis-pendulum-motion-in-phase-space","text":"To visualize chaotic behavior, we can plot phase portraits ( \\( \\theta \\) vs. \\( \\dot{\\theta} \\) ): python plt.figure(figsize=(6,6)) plt.plot(sol.y[0], sol.y[1], color='purple') plt.xlabel(r\" \\(\\theta\\) (rad)\") plt.ylabel(r\" \\(\\dot{\\theta}\\) (rad/s)\") plt.title(\"Phase Portrait of the Forced Damped Pendulum\") plt.grid() plt.show(","title":"\ud83d\udd39 Phase Space Analysis (Pendulum Motion in Phase Space)"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 \ud83c\udf0d Orbital Period and Orbital Radius \ud83c\udfd7 Motivation Kepler's Third Law is a fundamental principle of celestial mechanics, stating that the square of a planet\u2019s orbital period is proportional to the cube of its orbital radius. This law, derived from Newton's Law of Universal Gravitation , is crucial for: - Understanding planetary motion and exoplanet detection - Designing satellite orbits - Calculating masses of celestial bodies By deriving and simulating this relationship, we gain insight into the governing laws of planetary systems. \u2696 1. Theoretical Foundation \ud83d\udcdc Derivation of Kepler\u2019s Third Law For a body in circular orbit around a much larger mass (e.g., a planet around a star), the gravitational force provides the necessary centripetal force : \\[ F_{\\text{gravity}} = F_{\\text{centripetal}} \\] Using Newton\u2019s Law of Gravitation : \\[ F_{\\text{gravity}} = \\frac{G M m}{r^2} \\] where: - \\( G \\) = Gravitational constant ( \\(6.674 \\times 10^{-11} \\, \\text{m}^3\\text{kg}^{-1}\\text{s}^{-2}\\) ) - \\( M \\) = Mass of the central body (e.g., Sun, Earth) - \\( m \\) = Mass of the orbiting body - \\( r \\) = Orbital radius The centripetal force needed to maintain circular motion is: \\[ F_{\\text{centripetal}} = \\frac{m v^2}{r} \\] Since \\( F_{\\text{gravity}} = F_{\\text{centripetal}} \\) : \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Canceling \\( m \\) and solving for velocity \\( v \\) : \\[ v = \\sqrt{\\frac{G M}{r}} \\] The orbital period \\( T \\) is the time taken to complete one orbit: \\[ T = \\frac{\\text{circumference}}{\\text{velocity}} = \\frac{2\\pi r}{v} \\] Substituting \\( v = \\sqrt{\\frac{G M}{r}} \\) : \\[ T = \\frac{2\\pi r}{\\sqrt{\\frac{G M}{r}}} = 2\\pi \\sqrt{\\frac{r^3}{G M}} \\] \ud83d\udd39 Kepler\u2019s Third Law (Final Form) \\[ T^2 = \\frac{4\\pi^2}{G M} r^3 \\] This shows that \\( T^2 \\) is proportional to \\( r^3 \\) : \\[ T^2 \\propto r^3 \\] \ud83d\udd39 Implications: - Larger orbits = Longer periods - Planets farther from the Sun move slower - The mass of the central body can be determined from orbital data \ud83c\udf0d 2. Real-World Examples 1. Earth's Moon Distance: \\( r = 3.844 \\times 10^8 \\) m Period: \\( T = 27.3 \\) days Using Kepler\u2019s Law, we can estimate Earth\u2019s mass. 2. Planets in the Solar System If we take Earth\u2019s orbit as a reference ( \\( r = 1 \\) AU, \\( T = 1 \\) year), then for any planet: \\[ \\frac{T_{\\text{planet}}^2}{r_{\\text{planet}}^3} \\approx 1 \\] This relationship helps predict unknown orbital parameters of newly discovered planets. \ud83d\udcbb 3. Implementation (Python Simulation) We\u2019ll verify Kepler\u2019s Third Law using numerical simulations. \ud83d\udccc Step 1: Install Dependencies Ensure NumPy and Matplotlib are installed: bash pip install numpy matplotlib \ud83d\udccc Step 2: Python Code for Simulation python import numpy as np import matplotlib.pyplot as plt Constants G = 6.674e-11 # Gravitational constant (m\u00b3/kg/s\u00b2) M_sun = 1.989e30 # Mass of the Sun (kg) AU = 1.496e11 # 1 Astronomical Unit in meters Define orbital radii (in AU) for planets r_values_AU = np.array([0.39, 0.72, 1.0, 1.52, 5.2, 9.58, 19.18, 30.07]) # Mercury to Neptune r_values_m = r_values_AU * AU # Convert to meters Compute orbital periods using Kepler's Law T_values_s = 2 * np.pi * np.sqrt(r_values_m**3 / (G * M_sun)) # In seconds T_values_years = T_values_s / (60 * 60 * 24 * 365) # Convert to years Plot T\u00b2 vs. r\u00b3 to verify Kepler's Law plt.figure(figsize=(8, 5)) plt.plot(r_values_m 3, T_values_s 2, 'bo', label=\"Planets (Simulated Data)\") Best-fit line (Kepler\u2019s relation) coeff = np.polyfit(r_values_m 3, T_values_s 2, 1) kepler_fit = np.poly1d(coeff) plt.plot(r_values_m 3, kepler_fit(r_values_m 3), 'r--', label=\"Kepler's Law Fit\") Labels and title plt.xlabel(r\"Orbital Radius Cubed ( \\(r^3\\) ) [m\u00b3]\") plt.ylabel(r\"Orbital Period Squared ( \\(T^2\\) ) [s\u00b2]\") plt.title(\"Verification of Kepler's Third Law\") plt.legend() plt.grid() plt.show() \ud83d\udcca 4. Results and Discussion \ud83d\udd39 Graph Interpretation The data points align with a straight line , confirming \\( T^2 \\propto r^3 \\) . The best-fit line follows Kepler\u2019s predicted trend , verifying the law experimentally. \ud83d\udd39 Applications of Kepler\u2019s Law Finding Exoplanets: Measuring a planet\u2019s orbital period allows astronomers to estimate its distance from its star . Space Missions: Used in designing satellite orbits (e.g., GPS, geostationary satellites). \ud83d\udd39 Limitations Kepler\u2019s Law assumes circular orbits, but real orbits are elliptical . External forces (e.g., other planets\u2019 gravity) can slightly alter orbits . \ud83d\ude80 5. Extensions and Future Work Simulating elliptical orbits using Newton\u2019s second law numerically. Adding perturbations from additional celestial bodies (e.g., Jupiter\u2019s influence on Mars). Modeling binary star systems where both masses influence the motion.","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius","text":"","title":"\ud83c\udf0d Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#motivation","text":"Kepler's Third Law is a fundamental principle of celestial mechanics, stating that the square of a planet\u2019s orbital period is proportional to the cube of its orbital radius. This law, derived from Newton's Law of Universal Gravitation , is crucial for: - Understanding planetary motion and exoplanet detection - Designing satellite orbits - Calculating masses of celestial bodies By deriving and simulating this relationship, we gain insight into the governing laws of planetary systems.","title":"\ud83c\udfd7 Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-theoretical-foundation","text":"","title":"\u2696 1. Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#derivation-of-keplers-third-law","text":"For a body in circular orbit around a much larger mass (e.g., a planet around a star), the gravitational force provides the necessary centripetal force : \\[ F_{\\text{gravity}} = F_{\\text{centripetal}} \\] Using Newton\u2019s Law of Gravitation : \\[ F_{\\text{gravity}} = \\frac{G M m}{r^2} \\] where: - \\( G \\) = Gravitational constant ( \\(6.674 \\times 10^{-11} \\, \\text{m}^3\\text{kg}^{-1}\\text{s}^{-2}\\) ) - \\( M \\) = Mass of the central body (e.g., Sun, Earth) - \\( m \\) = Mass of the orbiting body - \\( r \\) = Orbital radius The centripetal force needed to maintain circular motion is: \\[ F_{\\text{centripetal}} = \\frac{m v^2}{r} \\] Since \\( F_{\\text{gravity}} = F_{\\text{centripetal}} \\) : \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Canceling \\( m \\) and solving for velocity \\( v \\) : \\[ v = \\sqrt{\\frac{G M}{r}} \\] The orbital period \\( T \\) is the time taken to complete one orbit: \\[ T = \\frac{\\text{circumference}}{\\text{velocity}} = \\frac{2\\pi r}{v} \\] Substituting \\( v = \\sqrt{\\frac{G M}{r}} \\) : \\[ T = \\frac{2\\pi r}{\\sqrt{\\frac{G M}{r}}} = 2\\pi \\sqrt{\\frac{r^3}{G M}} \\]","title":"\ud83d\udcdc Derivation of Kepler\u2019s Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#keplers-third-law-final-form","text":"\\[ T^2 = \\frac{4\\pi^2}{G M} r^3 \\] This shows that \\( T^2 \\) is proportional to \\( r^3 \\) : \\[ T^2 \\propto r^3 \\] \ud83d\udd39 Implications: - Larger orbits = Longer periods - Planets farther from the Sun move slower - The mass of the central body can be determined from orbital data","title":"\ud83d\udd39 Kepler\u2019s Third Law (Final Form)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-real-world-examples","text":"","title":"\ud83c\udf0d 2. Real-World Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-earths-moon","text":"Distance: \\( r = 3.844 \\times 10^8 \\) m Period: \\( T = 27.3 \\) days Using Kepler\u2019s Law, we can estimate Earth\u2019s mass.","title":"1. Earth's Moon"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-planets-in-the-solar-system","text":"If we take Earth\u2019s orbit as a reference ( \\( r = 1 \\) AU, \\( T = 1 \\) year), then for any planet: \\[ \\frac{T_{\\text{planet}}^2}{r_{\\text{planet}}^3} \\approx 1 \\] This relationship helps predict unknown orbital parameters of newly discovered planets.","title":"2. Planets in the Solar System"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-implementation-python-simulation","text":"We\u2019ll verify Kepler\u2019s Third Law using numerical simulations.","title":"\ud83d\udcbb 3. Implementation (Python Simulation)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#step-1-install-dependencies","text":"Ensure NumPy and Matplotlib are installed: bash pip install numpy matplotlib","title":"\ud83d\udccc Step 1: Install Dependencies"},{"location":"1%20Physics/2%20Gravity/Problem_1/#step-2-python-code-for-simulation","text":"python import numpy as np import matplotlib.pyplot as plt","title":"\ud83d\udccc Step 2: Python Code for Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#constants","text":"G = 6.674e-11 # Gravitational constant (m\u00b3/kg/s\u00b2) M_sun = 1.989e30 # Mass of the Sun (kg) AU = 1.496e11 # 1 Astronomical Unit in meters","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_1/#define-orbital-radii-in-au-for-planets","text":"r_values_AU = np.array([0.39, 0.72, 1.0, 1.52, 5.2, 9.58, 19.18, 30.07]) # Mercury to Neptune r_values_m = r_values_AU * AU # Convert to meters","title":"Define orbital radii (in AU) for planets"},{"location":"1%20Physics/2%20Gravity/Problem_1/#compute-orbital-periods-using-keplers-law","text":"T_values_s = 2 * np.pi * np.sqrt(r_values_m**3 / (G * M_sun)) # In seconds T_values_years = T_values_s / (60 * 60 * 24 * 365) # Convert to years","title":"Compute orbital periods using Kepler's Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plot-t2-vs-r3-to-verify-keplers-law","text":"plt.figure(figsize=(8, 5)) plt.plot(r_values_m 3, T_values_s 2, 'bo', label=\"Planets (Simulated Data)\")","title":"Plot T\u00b2 vs. r\u00b3 to verify Kepler's Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#best-fit-line-keplers-relation","text":"coeff = np.polyfit(r_values_m 3, T_values_s 2, 1) kepler_fit = np.poly1d(coeff) plt.plot(r_values_m 3, kepler_fit(r_values_m 3), 'r--', label=\"Kepler's Law Fit\")","title":"Best-fit line (Kepler\u2019s relation)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#labels-and-title","text":"plt.xlabel(r\"Orbital Radius Cubed ( \\(r^3\\) ) [m\u00b3]\") plt.ylabel(r\"Orbital Period Squared ( \\(T^2\\) ) [s\u00b2]\") plt.title(\"Verification of Kepler's Third Law\") plt.legend() plt.grid() plt.show()","title":"Labels and title"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-results-and-discussion","text":"","title":"\ud83d\udcca 4. Results and Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_1/#graph-interpretation","text":"The data points align with a straight line , confirming \\( T^2 \\propto r^3 \\) . The best-fit line follows Kepler\u2019s predicted trend , verifying the law experimentally.","title":"\ud83d\udd39 Graph Interpretation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#applications-of-keplers-law","text":"Finding Exoplanets: Measuring a planet\u2019s orbital period allows astronomers to estimate its distance from its star . Space Missions: Used in designing satellite orbits (e.g., GPS, geostationary satellites).","title":"\ud83d\udd39 Applications of Kepler\u2019s Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#limitations","text":"Kepler\u2019s Law assumes circular orbits, but real orbits are elliptical . External forces (e.g., other planets\u2019 gravity) can slightly alter orbits .","title":"\ud83d\udd39 Limitations"},{"location":"1%20Physics/2%20Gravity/Problem_1/#5-extensions-and-future-work","text":"Simulating elliptical orbits using Newton\u2019s second law numerically. Adding perturbations from additional celestial bodies (e.g., Jupiter\u2019s influence on Mars). Modeling binary star systems where both masses influence the motion.","title":"\ud83d\ude80 5. Extensions and Future Work"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2 Escape Velocities and Cosmic Velocities \ud83d\ude80 Motivation The concept of escape velocity is fundamental to space exploration, determining the energy required to break free from a celestial body's gravitational pull. Understanding the first, second, and third cosmic velocities enables us to: Design satellite launch profiles Plan interplanetary missions Conceptualize interstellar travel Understand fundamental astrophysical processes These velocity thresholds govern everything from placing satellites in orbit to sending probes beyond our solar system. \ud83d\udcda Theoretical Foundations \ud83c\udf10 First Cosmic Velocity (Orbital Velocity) Physical Meaning: The minimum horizontal speed required to maintain a stable circular orbit just above a celestial body's atmosphere. Mathematical Expression: v\u2081 = \u221a(GM/R) Where: - G = Gravitational constant (6.67430 \u00d7 10\u207b\u00b9\u00b9 m\u00b3 kg\u207b\u00b9 s\u207b\u00b2) - M = Mass of the celestial body - R = Radius of the celestial body \ud83e\ude90 Second Cosmic Velocity (Escape Velocity) Physical Meaning: The minimum speed needed to completely escape a celestial body's gravitational field from its surface without additional propulsion. Mathematical Expression: v\u2082 = \u221a(2GM/R) = v\u2081 \u00d7 \u221a2 \ud83c\udf0c Third Cosmic Velocity Physical Meaning: The minimum speed required at Earth's surface to escape not just Earth's gravity, but the entire solar system's gravitational influence. Mathematical Expression: v\u2083 = \u221a(v\u2082\u00b2 + (v\u2299 \u00d7 \u221a2)\u00b2) Where v\u2299 is the solar escape velocity at Earth's orbital distance. \ud83d\udd0d Key Parameters These velocities depend on: - Mass of the body - More massive objects require higher velocities - Radius of the body - Larger radii result in lower escape velocities - Orbital position (for third cosmic velocity) - Distance from the central star matters \ud83d\udcbb Computational Implementation python import numpy as np import matplotlib.pyplot as plt from matplotlib import cm Constants G = 6.67430e-11 # Gravitational constant (m\u00b3 kg\u207b\u00b9 s\u207b\u00b2) AU = 1.496e11 # Astronomical Unit (m) sun_mass = 1.989e30 # Solar mass (kg) Celestial body database bodies = { 'Earth': {'mass': 5.972e24, 'radius': 6.371e6, 'color': '#2E86AB'}, 'Mars': {'mass': 6.39e23, 'radius': 3.3895e6, 'color': '#E83F6F'}, 'Jupiter': {'mass': 1.898e27, 'radius': 6.9911e7, 'color': '#FF9F1C'} } def calculate_cosmic_velocities(body): \"\"\"Compute all three cosmic velocities for a celestial body\"\"\" M, R = body['mass'], body['radius'] # First cosmic velocity v1 = np.sqrt(G * M / R) # Second cosmic velocity v2 = np.sqrt(2 * G * M / R) # Third cosmic velocity (solar system escape) v_sun_escape = np.sqrt(2 * G * sun_mass / AU) v3 = np.sqrt(v2**2 + v_sun_escape**2) return v1, v2, v3 Calculate and display results print(\"| Celestial Body | 1st Cosmic (km/s) | 2nd Cosmic (km/s) | 3rd Cosmic (km/s) |\") print(\"|----------------|-------------------|-------------------|-------------------|\") for name, data in bodies.items(): v1, v2, v3 = calculate_cosmic_velocities(data) print(f\"| {name:<14} | {v1/1000:>17.2f} | {v2/1000:>17.2f} | {v3/1000:>17.2f} |\") Visualization fig, ax = plt.subplots(figsize=(10, 6), dpi=100) x = np.arange(len(bodies)) width = 0.25 Create bars for each velocity for i, (velocity, label) in enumerate(zip( ['1st Cosmic', '2nd Cosmic', '3rd Cosmic'], ['Orbital Velocity', 'Escape Velocity', 'Solar System Escape'] )): values = [calculate_cosmic_velocities(body)[i]/1000 for body in bodies.values()] colors = [body['color'] for body in bodies.values()] ax.bar(x + i*width, values, width, label=label, color=colors) Formatting ax.set_ylabel('Velocity (km/s)', fontsize=12) ax.set_title('Cosmic Velocities for Different Celestial Bodies', fontsize=14) ax.set_xticks(x + width) ax.set_xticklabels(bodies.keys(), fontsize=12) ax.legend(fontsize=10) ax.grid(axis='y', linestyle='--', alpha=0.7) plt.tight_layout() plt.show() \ud83d\udcca Results and Analysis Sample Output: Celestial Body 1st Cosmic (km/s) 2nd Cosmic (km/s) 3rd Cosmic (km/s) Earth 7.91 11.19 16.65 Mars 3.55 5.03 7.83 Jupiter 42.51 60.12 61.39 Key Observations: Jupiter's Dominance : The gas giant's massive size results in escape velocities over 5\u00d7 Earth's Mars Accessibility : Lower velocities make Mars an attractive target for missions Solar System Escape : The third cosmic velocity shows the additional energy needed to leave our solar system \ud83d\udef0 Applications in Space Exploration First Cosmic Velocity: Satellite deployment in low orbits Space station maintenance Earth observation missions Second Cosmic Velocity: Lunar missions Interplanetary travel Deep space probe launches Third Cosmic Velocity: Voyager missions leaving the heliosphere Future interstellar probes Understanding the Sun's gravitational influence \ud83d\udd2e Future Extensions Relativistic Effects : Incorporating Einstein's corrections for extreme gravity Atmospheric Drag : Modeling real-world launch conditions Multi-body Systems : Calculating velocities in binary star systems Variable Gravity : Exploring non-spherical mass distributions This analysis demonstrates how fundamental physics principles govern humanity's ability to explore space, from placing satellites in orbit to dreaming of interstellar travel.","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#escape-velocities-and-cosmic-velocities","text":"","title":"Escape Velocities and Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#motivation","text":"The concept of escape velocity is fundamental to space exploration, determining the energy required to break free from a celestial body's gravitational pull. Understanding the first, second, and third cosmic velocities enables us to: Design satellite launch profiles Plan interplanetary missions Conceptualize interstellar travel Understand fundamental astrophysical processes These velocity thresholds govern everything from placing satellites in orbit to sending probes beyond our solar system.","title":"\ud83d\ude80 Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#theoretical-foundations","text":"","title":"\ud83d\udcda Theoretical Foundations"},{"location":"1%20Physics/2%20Gravity/Problem_2/#first-cosmic-velocity-orbital-velocity","text":"Physical Meaning: The minimum horizontal speed required to maintain a stable circular orbit just above a celestial body's atmosphere. Mathematical Expression: v\u2081 = \u221a(GM/R) Where: - G = Gravitational constant (6.67430 \u00d7 10\u207b\u00b9\u00b9 m\u00b3 kg\u207b\u00b9 s\u207b\u00b2) - M = Mass of the celestial body - R = Radius of the celestial body","title":"\ud83c\udf10 First Cosmic Velocity (Orbital Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#second-cosmic-velocity-escape-velocity","text":"Physical Meaning: The minimum speed needed to completely escape a celestial body's gravitational field from its surface without additional propulsion. Mathematical Expression: v\u2082 = \u221a(2GM/R) = v\u2081 \u00d7 \u221a2","title":"\ud83e\ude90 Second Cosmic Velocity (Escape Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#third-cosmic-velocity","text":"Physical Meaning: The minimum speed required at Earth's surface to escape not just Earth's gravity, but the entire solar system's gravitational influence. Mathematical Expression: v\u2083 = \u221a(v\u2082\u00b2 + (v\u2299 \u00d7 \u221a2)\u00b2) Where v\u2299 is the solar escape velocity at Earth's orbital distance.","title":"\ud83c\udf0c Third Cosmic Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#key-parameters","text":"These velocities depend on: - Mass of the body - More massive objects require higher velocities - Radius of the body - Larger radii result in lower escape velocities - Orbital position (for third cosmic velocity) - Distance from the central star matters","title":"\ud83d\udd0d Key Parameters"},{"location":"1%20Physics/2%20Gravity/Problem_2/#computational-implementation","text":"python import numpy as np import matplotlib.pyplot as plt from matplotlib import cm","title":"\ud83d\udcbb Computational Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#constants","text":"G = 6.67430e-11 # Gravitational constant (m\u00b3 kg\u207b\u00b9 s\u207b\u00b2) AU = 1.496e11 # Astronomical Unit (m) sun_mass = 1.989e30 # Solar mass (kg)","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_2/#celestial-body-database","text":"bodies = { 'Earth': {'mass': 5.972e24, 'radius': 6.371e6, 'color': '#2E86AB'}, 'Mars': {'mass': 6.39e23, 'radius': 3.3895e6, 'color': '#E83F6F'}, 'Jupiter': {'mass': 1.898e27, 'radius': 6.9911e7, 'color': '#FF9F1C'} } def calculate_cosmic_velocities(body): \"\"\"Compute all three cosmic velocities for a celestial body\"\"\" M, R = body['mass'], body['radius'] # First cosmic velocity v1 = np.sqrt(G * M / R) # Second cosmic velocity v2 = np.sqrt(2 * G * M / R) # Third cosmic velocity (solar system escape) v_sun_escape = np.sqrt(2 * G * sun_mass / AU) v3 = np.sqrt(v2**2 + v_sun_escape**2) return v1, v2, v3","title":"Celestial body database"},{"location":"1%20Physics/2%20Gravity/Problem_2/#calculate-and-display-results","text":"print(\"| Celestial Body | 1st Cosmic (km/s) | 2nd Cosmic (km/s) | 3rd Cosmic (km/s) |\") print(\"|----------------|-------------------|-------------------|-------------------|\") for name, data in bodies.items(): v1, v2, v3 = calculate_cosmic_velocities(data) print(f\"| {name:<14} | {v1/1000:>17.2f} | {v2/1000:>17.2f} | {v3/1000:>17.2f} |\")","title":"Calculate and display results"},{"location":"1%20Physics/2%20Gravity/Problem_2/#visualization","text":"fig, ax = plt.subplots(figsize=(10, 6), dpi=100) x = np.arange(len(bodies)) width = 0.25","title":"Visualization"},{"location":"1%20Physics/2%20Gravity/Problem_2/#create-bars-for-each-velocity","text":"for i, (velocity, label) in enumerate(zip( ['1st Cosmic', '2nd Cosmic', '3rd Cosmic'], ['Orbital Velocity', 'Escape Velocity', 'Solar System Escape'] )): values = [calculate_cosmic_velocities(body)[i]/1000 for body in bodies.values()] colors = [body['color'] for body in bodies.values()] ax.bar(x + i*width, values, width, label=label, color=colors)","title":"Create bars for each velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#formatting","text":"ax.set_ylabel('Velocity (km/s)', fontsize=12) ax.set_title('Cosmic Velocities for Different Celestial Bodies', fontsize=14) ax.set_xticks(x + width) ax.set_xticklabels(bodies.keys(), fontsize=12) ax.legend(fontsize=10) ax.grid(axis='y', linestyle='--', alpha=0.7) plt.tight_layout() plt.show()","title":"Formatting"},{"location":"1%20Physics/2%20Gravity/Problem_2/#results-and-analysis","text":"","title":"\ud83d\udcca Results and Analysis"},{"location":"1%20Physics/2%20Gravity/Problem_2/#sample-output","text":"Celestial Body 1st Cosmic (km/s) 2nd Cosmic (km/s) 3rd Cosmic (km/s) Earth 7.91 11.19 16.65 Mars 3.55 5.03 7.83 Jupiter 42.51 60.12 61.39","title":"Sample Output:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#key-observations","text":"Jupiter's Dominance : The gas giant's massive size results in escape velocities over 5\u00d7 Earth's Mars Accessibility : Lower velocities make Mars an attractive target for missions Solar System Escape : The third cosmic velocity shows the additional energy needed to leave our solar system","title":"Key Observations:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#applications-in-space-exploration","text":"","title":"\ud83d\udef0 Applications in Space Exploration"},{"location":"1%20Physics/2%20Gravity/Problem_2/#first-cosmic-velocity","text":"Satellite deployment in low orbits Space station maintenance Earth observation missions","title":"First Cosmic Velocity:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#second-cosmic-velocity","text":"Lunar missions Interplanetary travel Deep space probe launches","title":"Second Cosmic Velocity:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#third-cosmic-velocity_1","text":"Voyager missions leaving the heliosphere Future interstellar probes Understanding the Sun's gravitational influence","title":"Third Cosmic Velocity:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#future-extensions","text":"Relativistic Effects : Incorporating Einstein's corrections for extreme gravity Atmospheric Drag : Modeling real-world launch conditions Multi-body Systems : Calculating velocities in binary star systems Variable Gravity : Exploring non-spherical mass distributions This analysis demonstrates how fundamental physics principles govern humanity's ability to explore space, from placing satellites in orbit to dreaming of interstellar travel.","title":"\ud83d\udd2e Future Extensions"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1 Problem 1: Interference Patterns on a Water Surface Motivation: Interference patterns form when waves from different sources overlap, creating new wave patterns on a surface. On water, this can be easily observed when ripples from different points meet and combine. Depending on their phase relationship, the waves may either reinforce (constructive interference) or cancel each other out (destructive interference). This concept helps us visualize wave behavior, understand phase relationships, and provides insight into real-world applications such as sound waves, electromagnetic waves, and water ripples. Task Breakdown: 1. Select a Regular Polygon: We begin by selecting a regular polygon (for example, an equilateral triangle, square, or pentagon) where point sources of waves will be placed at the vertices. 2. Position the Sources: We then place wave sources at the vertices of the polygon, assuming that each source emits a wave with the same amplitude, wavelength, and frequency. 3. Wave Equations: Each point source emits a wave that can be described by the equation for a circular wave in the water surface. The displacement at a point \\((x, y)\\) on the water surface due to a point source at \\((x_i, y_i)\\) is given by: \\[ \\text{Displacement} = A \\cos(k r - \\omega t + \\phi) \\] Where: - \\(A\\) is the amplitude, - \\(k = \\frac{2\\pi}{\\lambda}\\) is the wave number, - \\(\\lambda\\) is the wavelength, - \\(r = \\sqrt{(x - x_i)^2 + (y - y_i)^2}\\) is the distance from the source to the point, - \\(\\omega = 2\\pi f\\) is the angular frequency, - \\(f\\) is the frequency, and - \\(\\phi\\) is the initial phase of the wave. 4. Superposition of Waves: The principle of superposition states that the total displacement at any point is the sum of the displacements from each source. Therefore, for \\(N\\) sources placed at the vertices of the polygon, the total displacement is: \\[ \\text{Total Displacement} = \\sum_{i=1}^{N} A \\cos(k r_i - \\omega t + \\phi) \\] Where \\(r_i\\) is the distance from the \\(i\\) -th source to the point \\((x, y)\\) . 5. Analyze Interference Patterns: The superimposed wave function will exhibit regions of constructive interference (where the displacements add up to amplify the wave) and destructive interference (where the displacements cancel each other out). By analyzing this, we can understand the pattern of wave interaction. 6. Visualization: We can visualize the interference patterns by plotting the total displacement at each point on a grid, where the x and y axes represent spatial coordinates on the water surface. Implementation in Python: Below is the Python code to simulate and visualize the interference patterns caused by multiple point sources located at the vertices of a regular polygon (e.g., square). This simulation assumes that all sources emit waves with the same parameters. python import numpy as np import matplotlib.pyplot as plt Constants A = 1 # Amplitude of the wave lambda_ = 1 # Wavelength f = 1 # Frequency omega = 2 * np.pi * f # Angular frequency k = 2 * np.pi / lambda_ # Wave number phi = 0 # Initial phase of the wave radius = 5 # Radius of the circle where the sources are placed num_sources = 4 # Number of sources (e.g., 4 for a square) grid_size = 200 # Grid size for the plot (increase for higher resolution) Create a grid of points (x, y) x = np.linspace(-10, 10, grid_size) y = np.linspace(-10, 10, grid_size) X, Y = np.meshgrid(x, y) Calculate the coordinates of the sources (vertices of the regular polygon) theta = np.linspace(0, 2 * np.pi, num_sources, endpoint=False) source_x = radius * np.cos(theta) source_y = radius * np.sin(theta) Function to calculate wave displacement at a point (x, y) due to a source def wave_displacement(x, y, source_x, source_y, A, k, omega, t, phi): r = np.sqrt((x - source_x) 2 + (y - source_y) 2) # Distance from the source return A * np.cos(k * r - omega * t + phi) # Wave displacement equation Create a grid to store the displacement displacement = np.zeros_like(X) Time t = 0 Calculate the total displacement due to all sources using superposition for i in range(num_sources): displacement += wave_displacement(X, Y, source_x[i], source_y[i], A, k, omega, t, phi) Plotting the interference pattern plt.figure(figsize=(10, 8)) plt.contourf(X, Y, displacement, cmap='twilight', levels=100) # Contour plot with twilight colormap plt.colorbar(label=\"Wave Displacement\", pad=0.01, aspect=10) # Color bar Plot sources as bright markers (bigger and highlighted) plt.scatter(source_x, source_y, color=\"yellow\", edgecolors=\"black\", s=100, label=\"Wave Sources\", zorder=5) Add title and labels with improved font style plt.title(\"Interference Pattern on a Water Surface\", fontsize=16, fontweight='bold') plt.xlabel(\"X Position (Units)\", fontsize=12) plt.ylabel(\"Y Position (Units)\", fontsize=12) Grid and axis customization plt.grid(True, which='both', linestyle='--', linewidth=0.5, color='gray', alpha=0.7) plt.axhline(0, color='black',linewidth=1) plt.axvline(0, color='black',linewidth=1) Add a legend with a customized style plt.legend(fontsize=12, frameon=True, facecolor='white', edgecolor='black') Add a subtitle explaining the plot plt.figtext(0.5, 0.02, \"This plot shows the interference pattern formed by waves from a regular polygon of sources.\", ha=\"center\", fontsize=12, color='darkslategray') Show the plot plt.tight_layout() plt.show() Key Features of the Code: Grid Creation : A mesh grid is created over a specified range of x and y values. This represents the water surface where the interference pattern will be plotted. Wave Function : The displacement due to each source is calculated based on the wave equation. The distance between each point on the grid and the source is calculated to determine the wave displacement. Superposition : The total wave displacement is calculated by summing the contributions from each point source. Visualization : The contourf function is used to plot the interference pattern, which is color-coded to show regions of constructive and destructive interference. The sources are marked as yellow points for clear identification. Customization : The plot is customized with labels, grid lines, legends, and a color bar for better clarity and aesthetics.","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1-interference-patterns-on-a-water-surface","text":"","title":"Problem 1: Interference Patterns on a Water Surface"},{"location":"1%20Physics/3%20Waves/Problem_1/#motivation","text":"Interference patterns form when waves from different sources overlap, creating new wave patterns on a surface. On water, this can be easily observed when ripples from different points meet and combine. Depending on their phase relationship, the waves may either reinforce (constructive interference) or cancel each other out (destructive interference). This concept helps us visualize wave behavior, understand phase relationships, and provides insight into real-world applications such as sound waves, electromagnetic waves, and water ripples.","title":"Motivation:"},{"location":"1%20Physics/3%20Waves/Problem_1/#task-breakdown","text":"","title":"Task Breakdown:"},{"location":"1%20Physics/3%20Waves/Problem_1/#1-select-a-regular-polygon","text":"We begin by selecting a regular polygon (for example, an equilateral triangle, square, or pentagon) where point sources of waves will be placed at the vertices.","title":"1. Select a Regular Polygon:"},{"location":"1%20Physics/3%20Waves/Problem_1/#2-position-the-sources","text":"We then place wave sources at the vertices of the polygon, assuming that each source emits a wave with the same amplitude, wavelength, and frequency.","title":"2. Position the Sources:"},{"location":"1%20Physics/3%20Waves/Problem_1/#3-wave-equations","text":"Each point source emits a wave that can be described by the equation for a circular wave in the water surface. The displacement at a point \\((x, y)\\) on the water surface due to a point source at \\((x_i, y_i)\\) is given by: \\[ \\text{Displacement} = A \\cos(k r - \\omega t + \\phi) \\] Where: - \\(A\\) is the amplitude, - \\(k = \\frac{2\\pi}{\\lambda}\\) is the wave number, - \\(\\lambda\\) is the wavelength, - \\(r = \\sqrt{(x - x_i)^2 + (y - y_i)^2}\\) is the distance from the source to the point, - \\(\\omega = 2\\pi f\\) is the angular frequency, - \\(f\\) is the frequency, and - \\(\\phi\\) is the initial phase of the wave.","title":"3. Wave Equations:"},{"location":"1%20Physics/3%20Waves/Problem_1/#4-superposition-of-waves","text":"The principle of superposition states that the total displacement at any point is the sum of the displacements from each source. Therefore, for \\(N\\) sources placed at the vertices of the polygon, the total displacement is: \\[ \\text{Total Displacement} = \\sum_{i=1}^{N} A \\cos(k r_i - \\omega t + \\phi) \\] Where \\(r_i\\) is the distance from the \\(i\\) -th source to the point \\((x, y)\\) .","title":"4. Superposition of Waves:"},{"location":"1%20Physics/3%20Waves/Problem_1/#5-analyze-interference-patterns","text":"The superimposed wave function will exhibit regions of constructive interference (where the displacements add up to amplify the wave) and destructive interference (where the displacements cancel each other out). By analyzing this, we can understand the pattern of wave interaction.","title":"5. Analyze Interference Patterns:"},{"location":"1%20Physics/3%20Waves/Problem_1/#6-visualization","text":"We can visualize the interference patterns by plotting the total displacement at each point on a grid, where the x and y axes represent spatial coordinates on the water surface.","title":"6. Visualization:"},{"location":"1%20Physics/3%20Waves/Problem_1/#implementation-in-python","text":"Below is the Python code to simulate and visualize the interference patterns caused by multiple point sources located at the vertices of a regular polygon (e.g., square). This simulation assumes that all sources emit waves with the same parameters. python import numpy as np import matplotlib.pyplot as plt","title":"Implementation in Python:"},{"location":"1%20Physics/3%20Waves/Problem_1/#constants","text":"A = 1 # Amplitude of the wave lambda_ = 1 # Wavelength f = 1 # Frequency omega = 2 * np.pi * f # Angular frequency k = 2 * np.pi / lambda_ # Wave number phi = 0 # Initial phase of the wave radius = 5 # Radius of the circle where the sources are placed num_sources = 4 # Number of sources (e.g., 4 for a square) grid_size = 200 # Grid size for the plot (increase for higher resolution)","title":"Constants"},{"location":"1%20Physics/3%20Waves/Problem_1/#create-a-grid-of-points-x-y","text":"x = np.linspace(-10, 10, grid_size) y = np.linspace(-10, 10, grid_size) X, Y = np.meshgrid(x, y)","title":"Create a grid of points (x, y)"},{"location":"1%20Physics/3%20Waves/Problem_1/#calculate-the-coordinates-of-the-sources-vertices-of-the-regular-polygon","text":"theta = np.linspace(0, 2 * np.pi, num_sources, endpoint=False) source_x = radius * np.cos(theta) source_y = radius * np.sin(theta)","title":"Calculate the coordinates of the sources (vertices of the regular polygon)"},{"location":"1%20Physics/3%20Waves/Problem_1/#function-to-calculate-wave-displacement-at-a-point-x-y-due-to-a-source","text":"def wave_displacement(x, y, source_x, source_y, A, k, omega, t, phi): r = np.sqrt((x - source_x) 2 + (y - source_y) 2) # Distance from the source return A * np.cos(k * r - omega * t + phi) # Wave displacement equation","title":"Function to calculate wave displacement at a point (x, y) due to a source"},{"location":"1%20Physics/3%20Waves/Problem_1/#create-a-grid-to-store-the-displacement","text":"displacement = np.zeros_like(X)","title":"Create a grid to store the displacement"},{"location":"1%20Physics/3%20Waves/Problem_1/#time","text":"t = 0","title":"Time"},{"location":"1%20Physics/3%20Waves/Problem_1/#calculate-the-total-displacement-due-to-all-sources-using-superposition","text":"for i in range(num_sources): displacement += wave_displacement(X, Y, source_x[i], source_y[i], A, k, omega, t, phi)","title":"Calculate the total displacement due to all sources using superposition"},{"location":"1%20Physics/3%20Waves/Problem_1/#plotting-the-interference-pattern","text":"plt.figure(figsize=(10, 8)) plt.contourf(X, Y, displacement, cmap='twilight', levels=100) # Contour plot with twilight colormap plt.colorbar(label=\"Wave Displacement\", pad=0.01, aspect=10) # Color bar","title":"Plotting the interference pattern"},{"location":"1%20Physics/3%20Waves/Problem_1/#plot-sources-as-bright-markers-bigger-and-highlighted","text":"plt.scatter(source_x, source_y, color=\"yellow\", edgecolors=\"black\", s=100, label=\"Wave Sources\", zorder=5)","title":"Plot sources as bright markers (bigger and highlighted)"},{"location":"1%20Physics/3%20Waves/Problem_1/#add-title-and-labels-with-improved-font-style","text":"plt.title(\"Interference Pattern on a Water Surface\", fontsize=16, fontweight='bold') plt.xlabel(\"X Position (Units)\", fontsize=12) plt.ylabel(\"Y Position (Units)\", fontsize=12)","title":"Add title and labels with improved font style"},{"location":"1%20Physics/3%20Waves/Problem_1/#grid-and-axis-customization","text":"plt.grid(True, which='both', linestyle='--', linewidth=0.5, color='gray', alpha=0.7) plt.axhline(0, color='black',linewidth=1) plt.axvline(0, color='black',linewidth=1)","title":"Grid and axis customization"},{"location":"1%20Physics/3%20Waves/Problem_1/#add-a-legend-with-a-customized-style","text":"plt.legend(fontsize=12, frameon=True, facecolor='white', edgecolor='black')","title":"Add a legend with a customized style"},{"location":"1%20Physics/3%20Waves/Problem_1/#add-a-subtitle-explaining-the-plot","text":"plt.figtext(0.5, 0.02, \"This plot shows the interference pattern formed by waves from a regular polygon of sources.\", ha=\"center\", fontsize=12, color='darkslategray')","title":"Add a subtitle explaining the plot"},{"location":"1%20Physics/3%20Waves/Problem_1/#show-the-plot","text":"plt.tight_layout() plt.show()","title":"Show the plot"},{"location":"1%20Physics/3%20Waves/Problem_1/#key-features-of-the-code","text":"Grid Creation : A mesh grid is created over a specified range of x and y values. This represents the water surface where the interference pattern will be plotted. Wave Function : The displacement due to each source is calculated based on the wave equation. The distance between each point on the grid and the source is calculated to determine the wave displacement. Superposition : The total wave displacement is calculated by summing the contributions from each point source. Visualization : The contourf function is used to plot the interference pattern, which is color-coded to show regions of constructive and destructive interference. The sources are marked as yellow points for clear identification. Customization : The plot is customized with labels, grid lines, legends, and a color bar for better clarity and aesthetics.","title":"Key Features of the Code:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}